{"version":3,"file":"immer.umd.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { Plugin, Models } from '@rematch/core'\nimport Redux from 'redux'\nimport { enableES5, enableMapSet, produce } from 'immer'\n\nenableES5()\nenableMapSet()\n\nexport type ImmerPluginConfig = {\n\twhitelist?: string[]\n\tblacklist?: string[]\n}\n\nfunction wrapReducerWithImmer(reducer: Redux.Reducer) {\n\t// reducer must return value because literal don't support immer\n\treturn (state: any, payload: any): any =>\n\t\ttypeof state === 'object'\n\t\t\t? produce(state, (draft: any) => {\n\t\t\t\t\tconst next = reducer(draft, payload)\n\t\t\t\t\tif (typeof next === 'object') return next\n\t\t\t\t\treturn undefined\n\t\t\t  })\n\t\t\t: reducer(state, payload)\n}\n\nconst immerPlugin = <\n\tTModels extends Models<TModels>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tconfig?: ImmerPluginConfig\n): Plugin<TModels, TExtraModels> => ({\n\tonReducer(reducer: Redux.Reducer, model: string): Redux.Reducer | void {\n\t\tif (\n\t\t\t!config ||\n\t\t\t(!config.whitelist && !config.blacklist) ||\n\t\t\t(config.whitelist && model in config.whitelist) ||\n\t\t\t(config.blacklist && !(model in config.blacklist))\n\t\t) {\n\t\t\treturn wrapReducerWithImmer(reducer)\n\t\t}\n\n\t\treturn undefined\n\t},\n})\n\nexport default immerPlugin\n"],"names":["config","onReducer","reducer","model","whitelist","blacklist","state","payload","produce","draft","next","wrapReducerWithImmer"],"mappings":"2RAwBoB,SAInBA,SACoC,CACpCC,mBAAUC,EAAwBC,OAE/BH,IACCA,EAAOI,YAAcJ,EAAOK,WAC7BL,EAAOI,WAAaD,KAASH,EAAOI,WACpCJ,EAAOK,aAAeF,KAASH,EAAOK,kBAvB1C,SAA8BH,UAEtB,SAACI,EAAYC,SACF,iBAAVD,EACJE,UAAQF,GAAO,SAACG,OACVC,EAAOR,EAAQO,EAAOF,MACR,iBAATG,EAAmB,OAAOA,KAGrCR,EAAQI,EAAOC,IAgBVI,CAAqBT"}