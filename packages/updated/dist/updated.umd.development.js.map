{"version":3,"file":"updated.umd.development.js","sources":["../src/index.ts"],"sourcesContent":["import {\n\tExtractRematchDispatchersFromEffects,\n\tModels,\n\tPlugin,\n\tModel,\n} from '@rematch/core'\n\nexport interface UpdatedConfig<T = Date> {\n\tname?: string\n\tblacklist?: string[]\n\tdateCreator?(): T\n}\n\ntype UpdatedState<TModels extends Models<TModels>, T = Date> = {\n\t[modelName in keyof TModels]: {\n\t\t[effectName in keyof ExtractRematchDispatchersFromEffects<\n\t\t\tTModels[modelName]['effects'],\n\t\t\tTModels\n\t\t>]: T\n\t}\n}\n\ninterface UpdatedModel<TModels extends Models<TModels>, T = Date>\n\textends Model<TModels, UpdatedState<TModels, T>> {\n\treducers: {\n\t\tonUpdate(\n\t\t\tstate: UpdatedState<TModels, T>,\n\t\t\tpayload: { name: string; action: string }\n\t\t): UpdatedState<TModels, T>\n\t}\n}\n\nexport interface ExtraModelsFromUpdated<\n\tTModels extends Models<TModels>,\n\tT = Date\n> extends Models<TModels> {\n\tupdated: UpdatedModel<TModels, T>\n}\n\nconst updatedPlugin = <\n\tTModels extends Models<TModels>,\n\tTExtraModels extends Models<TModels> = {},\n\tT = Date\n>(\n\tconfig: UpdatedConfig<T> = {}\n): Plugin<TModels, TExtraModels, ExtraModelsFromUpdated<TModels, T>> => {\n\tconst updatedModelName = config.name || 'updated'\n\tconst updated = {\n\t\tname: updatedModelName,\n\t\tstate: {} as Record<string, any>,\n\t\treducers: {\n\t\t\tonUpdate: (\n\t\t\t\tstate: UpdatedState<TModels, T>,\n\t\t\t\tpayload: { name: string; action: string }\n\t\t\t): UpdatedState<TModels, T> => ({\n\t\t\t\t...state,\n\t\t\t\t[payload.name]: {\n\t\t\t\t\t...state[payload.name],\n\t\t\t\t\t[payload.action]: config.dateCreator\n\t\t\t\t\t\t? config.dateCreator()\n\t\t\t\t\t\t: new Date(),\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t}\n\n\tconst avoidModels = [...(config.blacklist || []), updatedModelName]\n\n\treturn {\n\t\tconfig: {\n\t\t\tmodels: {\n\t\t\t\tupdated: updated as UpdatedModel<TModels, T>,\n\t\t\t},\n\t\t},\n\t\tonModel({ name }, rematch): void {\n\t\t\t// do not run dispatch on updated model and blacklisted models\n\t\t\tif (avoidModels.includes(name)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst modelActions = rematch.dispatch[name]\n\n\t\t\t// add empty object for effects\n\t\t\tupdated.state[name] = {}\n\n\t\t\t// map over effects within models\n\t\t\tfor (const action of Object.keys(modelActions)) {\n\t\t\t\tif (rematch.dispatch[name][action].isEffect) {\n\t\t\t\t\t// copy function\n\t\t\t\t\tconst originalDispatcher = rematch.dispatch[name][action]\n\n\t\t\t\t\t// replace existing effect with new dispatch\n\t\t\t\t\trematch.dispatch[name][action] = (...props: any): any => {\n\t\t\t\t\t\tconst effectResult = originalDispatcher(...props)\n\t\t\t\t\t\t// check if result is a promise\n\t\t\t\t\t\tif (effectResult?.then) {\n\t\t\t\t\t\t\teffectResult.then((result: any) => {\n\t\t\t\t\t\t\t\t// set updated when promise finishes\n\t\t\t\t\t\t\t\trematch.dispatch[updatedModelName].onUpdate({ name, action })\n\t\t\t\t\t\t\t\treturn result\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// no need to wait for the result, as it's not a promise\n\t\t\t\t\t\t\trematch.dispatch[updatedModelName].onUpdate({ name, action })\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn effectResult\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t}\n}\n\nexport default updatedPlugin\n"],"names":["updatedPlugin","config","updatedModelName","name","updated","state","reducers","onUpdate","payload","action","dateCreator","Date","avoidModels","blacklist","models","onModel","rematch","includes","modelActions","dispatch","isEffect","originalDispatcher","effectResult","then","result","Object","keys"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;EAuCA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAKrBC,MALqB;QAKrBA;EAAAA,IAAAA,SAA2B;;;EAE3B,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,IAAP,IAAe,SAAxC;EACA,MAAMC,OAAO,GAAG;EACfD,IAAAA,IAAI,EAAED,gBADS;EAEfG,IAAAA,KAAK,EAAE,EAFQ;EAGfC,IAAAA,QAAQ,EAAE;EACTC,MAAAA,QAAQ,EAAE,kBACTF,KADS,EAETG,OAFS;EAAA;;EAAA,4BAINH,KAJM,6BAKRG,OAAO,CAACL,IALA,iBAMLE,KAAK,CAACG,OAAO,CAACL,IAAT,CANA,6BAOPK,OAAO,CAACC,MAPD,IAOUR,MAAM,CAACS,WAAP,GACfT,MAAM,CAACS,WAAP,EADe,GAEf,IAAIC,IAAJ,EATK;EAAA;EADD;EAHK,GAAhB;EAmBA,MAAMC,WAAW,aAAQX,MAAM,CAACY,SAAP,IAAoB,EAA5B,GAAiCX,gBAAjC,EAAjB;EAEA,SAAO;EACND,IAAAA,MAAM,EAAE;EACPa,MAAAA,MAAM,EAAE;EACPV,QAAAA,OAAO,EAAEA;EADF;EADD,KADF;EAMNW,IAAAA,OANM,yBAMYC,OANZ;YAMIb,YAAAA;;EAET,UAAIS,WAAW,CAACK,QAAZ,CAAqBd,IAArB,CAAJ,EAAgC;EAC/B;EACA;;EAED,UAAMe,YAAY,GAAGF,OAAO,CAACG,QAAR,CAAiBhB,IAAjB,CAArB;EAGAC,MAAAA,OAAO,CAACC,KAAR,CAAcF,IAAd,IAAsB,EAAtB;;;EAGK,YAAMM,MAAM,mBAAZ;;EACJ,YAAIO,OAAO,CAACG,QAAR,CAAiBhB,IAAjB,EAAuBM,MAAvB,EAA+BW,QAAnC,EAA6C;EAE5C,cAAMC,kBAAkB,GAAGL,OAAO,CAACG,QAAR,CAAiBhB,IAAjB,EAAuBM,MAAvB,CAA3B;;EAGAO,UAAAA,OAAO,CAACG,QAAR,CAAiBhB,IAAjB,EAAuBM,MAAvB,IAAiC;EAChC,gBAAMa,YAAY,GAAGD,kBAAkB,MAAlB,mBAArB;;EAEA,gBAAIC,YAAJ,aAAIA,YAAJ,uBAAIA,YAAY,CAAEC,IAAlB,EAAwB;EACvBD,cAAAA,YAAY,CAACC,IAAb,CAAkB,UAACC,MAAD;EAEjBR,gBAAAA,OAAO,CAACG,QAAR,CAAiBjB,gBAAjB,EAAmCK,QAAnC,CAA4C;EAAEJ,kBAAAA,IAAI,EAAJA,IAAF;EAAQM,kBAAAA,MAAM,EAANA;EAAR,iBAA5C;EACA,uBAAOe,MAAP;EACA,eAJD;EAKA,aAND,MAMO;EAENR,cAAAA,OAAO,CAACG,QAAR,CAAiBjB,gBAAjB,EAAmCK,QAAnC,CAA4C;EAAEJ,gBAAAA,IAAI,EAAJA,IAAF;EAAQM,gBAAAA,MAAM,EAANA;EAAR,eAA5C;EACA;;EAED,mBAAOa,YAAP;EACA,WAfD;EAgBA;;;EAtBF,sCAAqBG,MAAM,CAACC,IAAP,CAAYR,YAAZ,CAArB,kCAAgD;EAAA;EAuB/C;EACD;EA1CK,GAAP;EA4CA,CAzED;;;;;;;;;;;;"}