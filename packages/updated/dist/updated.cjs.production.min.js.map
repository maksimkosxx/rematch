{"version":3,"file":"updated.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import {\n\tExtractRematchDispatchersFromEffects,\n\tModels,\n\tPlugin,\n\tModel,\n} from '@rematch/core'\n\nexport interface UpdatedConfig<T = Date> {\n\tname?: string\n\tblacklist?: string[]\n\tdateCreator?(): T\n}\n\ntype UpdatedState<TModels extends Models<TModels>, T = Date> = {\n\t[modelName in keyof TModels]: {\n\t\t[effectName in keyof ExtractRematchDispatchersFromEffects<\n\t\t\tTModels[modelName]['effects'],\n\t\t\tTModels\n\t\t>]: T\n\t}\n}\n\ninterface UpdatedModel<TModels extends Models<TModels>, T = Date>\n\textends Model<TModels, UpdatedState<TModels, T>> {\n\treducers: {\n\t\tonUpdate(\n\t\t\tstate: UpdatedState<TModels, T>,\n\t\t\tpayload: { name: string; action: string }\n\t\t): UpdatedState<TModels, T>\n\t}\n}\n\nexport interface ExtraModelsFromUpdated<\n\tTModels extends Models<TModels>,\n\tT = Date\n> extends Models<TModels> {\n\tupdated: UpdatedModel<TModels, T>\n}\n\nconst updatedPlugin = <\n\tTModels extends Models<TModels>,\n\tTExtraModels extends Models<TModels> = {},\n\tT = Date\n>(\n\tconfig: UpdatedConfig<T> = {}\n): Plugin<TModels, TExtraModels, ExtraModelsFromUpdated<TModels, T>> => {\n\tconst updatedModelName = config.name || 'updated'\n\tconst updated = {\n\t\tname: updatedModelName,\n\t\tstate: {} as Record<string, any>,\n\t\treducers: {\n\t\t\tonUpdate: (\n\t\t\t\tstate: UpdatedState<TModels, T>,\n\t\t\t\tpayload: { name: string; action: string }\n\t\t\t): UpdatedState<TModels, T> => ({\n\t\t\t\t...state,\n\t\t\t\t[payload.name]: {\n\t\t\t\t\t...state[payload.name],\n\t\t\t\t\t[payload.action]: config.dateCreator\n\t\t\t\t\t\t? config.dateCreator()\n\t\t\t\t\t\t: new Date(),\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t}\n\n\tconst avoidModels = [...(config.blacklist || []), updatedModelName]\n\n\treturn {\n\t\tconfig: {\n\t\t\tmodels: {\n\t\t\t\tupdated: updated as UpdatedModel<TModels, T>,\n\t\t\t},\n\t\t},\n\t\tonModel({ name }, rematch): void {\n\t\t\t// do not run dispatch on updated model and blacklisted models\n\t\t\tif (avoidModels.includes(name)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst modelActions = rematch.dispatch[name]\n\n\t\t\t// add empty object for effects\n\t\t\tupdated.state[name] = {}\n\n\t\t\t// map over effects within models\n\t\t\tfor (const action of Object.keys(modelActions)) {\n\t\t\t\tif (rematch.dispatch[name][action].isEffect) {\n\t\t\t\t\t// copy function\n\t\t\t\t\tconst originalDispatcher = rematch.dispatch[name][action]\n\n\t\t\t\t\t// replace existing effect with new dispatch\n\t\t\t\t\trematch.dispatch[name][action] = (...props: any): any => {\n\t\t\t\t\t\tconst effectResult = originalDispatcher(...props)\n\t\t\t\t\t\t// check if result is a promise\n\t\t\t\t\t\tif (effectResult?.then) {\n\t\t\t\t\t\t\teffectResult.then((result: any) => {\n\t\t\t\t\t\t\t\t// set updated when promise finishes\n\t\t\t\t\t\t\t\trematch.dispatch[updatedModelName].onUpdate({ name, action })\n\t\t\t\t\t\t\t\treturn result\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// no need to wait for the result, as it's not a promise\n\t\t\t\t\t\t\trematch.dispatch[updatedModelName].onUpdate({ name, action })\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn effectResult\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t}\n}\n\nexport default updatedPlugin\n"],"names":["config","updatedModelName","name","updated","state","reducers","onUpdate","payload","action","dateCreator","Date","avoidModels","blacklist","models","onModel","rematch","includes","modelActions","dispatch","isEffect","originalDispatcher","effectResult","then","result","Object","keys"],"mappings":"mSAuCsB,SAKrBA,YAAAA,IAAAA,EAA2B,QAErBC,EAAmBD,EAAOE,MAAQ,UAClCC,EAAU,CACfD,KAAMD,EACNG,MAAO,GACPC,SAAU,CACTC,SAAU,SACTF,EACAG,uBAEGH,UACFG,EAAQL,WACLE,EAAMG,EAAQL,cAChBK,EAAQC,QAASR,EAAOS,YACtBT,EAAOS,cACP,IAAIC,gBAMLC,YAAmBX,EAAOY,WAAa,IAAKX,UAE3C,CACND,OAAQ,CACPa,OAAQ,CACPV,QAASA,IAGXW,mBAAkBC,OAARb,IAAAA,SAELS,EAAYK,SAASd,QAInBe,EAAeF,EAAQG,SAAShB,GAGtCC,EAAQC,MAAMF,GAAQ,4BAGXM,UACNO,EAAQG,SAAShB,GAAMM,GAAQW,SAAU,KAEtCC,EAAqBL,EAAQG,SAAShB,GAAMM,GAGlDO,EAAQG,SAAShB,GAAMM,GAAU,eAC1Ba,EAAeD,iCAEjBC,MAAAA,SAAAA,EAAcC,MACjBD,EAAaC,MAAK,SAACC,UAElBR,EAAQG,SAASjB,GAAkBK,SAAS,CAAEJ,KAAAA,EAAMM,OAAAA,IAC7Ce,KAIRR,EAAQG,SAASjB,GAAkBK,SAAS,CAAEJ,KAAAA,EAAMM,OAAAA,IAG9Ca,WApBWG,OAAOC,KAAKR"}