{"version":3,"file":"updated.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import {\n\tExtractRematchDispatchersFromEffects,\n\tModels,\n\tPlugin,\n\tModel,\n} from '@rematch/core'\n\nexport interface UpdatedConfig<T = Date> {\n\tname?: string\n\tblacklist?: string[]\n\tdateCreator?(): T\n}\n\ntype UpdatedState<TModels extends Models<TModels>, T = Date> = {\n\t[modelName in keyof TModels]: {\n\t\t[effectName in keyof ExtractRematchDispatchersFromEffects<\n\t\t\tTModels[modelName]['effects'],\n\t\t\tTModels\n\t\t>]: T\n\t}\n}\n\ninterface UpdatedModel<TModels extends Models<TModels>, T = Date>\n\textends Model<TModels, UpdatedState<TModels, T>> {\n\treducers: {\n\t\tonUpdate(\n\t\t\tstate: UpdatedState<TModels, T>,\n\t\t\tpayload: { name: string; action: string }\n\t\t): UpdatedState<TModels, T>\n\t}\n}\n\nexport interface ExtraModelsFromUpdated<\n\tTModels extends Models<TModels>,\n\tT = Date\n> extends Models<TModels> {\n\tupdated: UpdatedModel<TModels, T>\n}\n\nconst updatedPlugin = <\n\tTModels extends Models<TModels>,\n\tTExtraModels extends Models<TModels> = {},\n\tT = Date\n>(\n\tconfig: UpdatedConfig<T> = {}\n): Plugin<TModels, TExtraModels, ExtraModelsFromUpdated<TModels, T>> => {\n\tconst updatedModelName = config.name || 'updated'\n\tconst updated = {\n\t\tname: updatedModelName,\n\t\tstate: {} as Record<string, any>,\n\t\treducers: {\n\t\t\tonUpdate: (\n\t\t\t\tstate: UpdatedState<TModels, T>,\n\t\t\t\tpayload: { name: string; action: string }\n\t\t\t): UpdatedState<TModels, T> => ({\n\t\t\t\t...state,\n\t\t\t\t[payload.name]: {\n\t\t\t\t\t...state[payload.name],\n\t\t\t\t\t[payload.action]: config.dateCreator\n\t\t\t\t\t\t? config.dateCreator()\n\t\t\t\t\t\t: new Date(),\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t}\n\n\tconst avoidModels = [...(config.blacklist || []), updatedModelName]\n\n\treturn {\n\t\tconfig: {\n\t\t\tmodels: {\n\t\t\t\tupdated: updated as UpdatedModel<TModels, T>,\n\t\t\t},\n\t\t},\n\t\tonModel({ name }, rematch): void {\n\t\t\t// do not run dispatch on updated model and blacklisted models\n\t\t\tif (avoidModels.includes(name)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst modelActions = rematch.dispatch[name]\n\n\t\t\t// add empty object for effects\n\t\t\tupdated.state[name] = {}\n\n\t\t\t// map over effects within models\n\t\t\tfor (const action of Object.keys(modelActions)) {\n\t\t\t\tif (rematch.dispatch[name][action].isEffect) {\n\t\t\t\t\t// copy function\n\t\t\t\t\tconst originalDispatcher = rematch.dispatch[name][action]\n\n\t\t\t\t\t// replace existing effect with new dispatch\n\t\t\t\t\trematch.dispatch[name][action] = (...props: any): any => {\n\t\t\t\t\t\tconst effectResult = originalDispatcher(...props)\n\t\t\t\t\t\t// check if result is a promise\n\t\t\t\t\t\tif (effectResult?.then) {\n\t\t\t\t\t\t\teffectResult.then((result: any) => {\n\t\t\t\t\t\t\t\t// set updated when promise finishes\n\t\t\t\t\t\t\t\trematch.dispatch[updatedModelName].onUpdate({ name, action })\n\t\t\t\t\t\t\t\treturn result\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// no need to wait for the result, as it's not a promise\n\t\t\t\t\t\t\trematch.dispatch[updatedModelName].onUpdate({ name, action })\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn effectResult\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t}\n}\n\nexport default updatedPlugin\n"],"names":["updatedPlugin","config","updatedModelName","name","updated","state","reducers","onUpdate","payload","action","dateCreator","Date","avoidModels","blacklist","models","onModel","rematch","includes","modelActions","dispatch","isEffect","originalDispatcher","effectResult","then","result","Object","keys"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAuCA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAKrBC,MALqB;MAKrBA;AAAAA,IAAAA,SAA2B;;;AAE3B,MAAMC,gBAAgB,GAAGD,MAAM,CAACE,IAAP,IAAe,SAAxC;AACA,MAAMC,OAAO,GAAG;AACfD,IAAAA,IAAI,EAAED,gBADS;AAEfG,IAAAA,KAAK,EAAE,EAFQ;AAGfC,IAAAA,QAAQ,EAAE;AACTC,MAAAA,QAAQ,EAAE,kBACTF,KADS,EAETG,OAFS;AAAA;;AAAA,4BAINH,KAJM,6BAKRG,OAAO,CAACL,IALA,iBAMLE,KAAK,CAACG,OAAO,CAACL,IAAT,CANA,6BAOPK,OAAO,CAACC,MAPD,IAOUR,MAAM,CAACS,WAAP,GACfT,MAAM,CAACS,WAAP,EADe,GAEf,IAAIC,IAAJ,EATK;AAAA;AADD;AAHK,GAAhB;AAmBA,MAAMC,WAAW,aAAQX,MAAM,CAACY,SAAP,IAAoB,EAA5B,GAAiCX,gBAAjC,EAAjB;AAEA,SAAO;AACND,IAAAA,MAAM,EAAE;AACPa,MAAAA,MAAM,EAAE;AACPV,QAAAA,OAAO,EAAEA;AADF;AADD,KADF;AAMNW,IAAAA,OANM,yBAMYC,OANZ;UAMIb,YAAAA;;AAET,UAAIS,WAAW,CAACK,QAAZ,CAAqBd,IAArB,CAAJ,EAAgC;AAC/B;AACA;;AAED,UAAMe,YAAY,GAAGF,OAAO,CAACG,QAAR,CAAiBhB,IAAjB,CAArB;AAGAC,MAAAA,OAAO,CAACC,KAAR,CAAcF,IAAd,IAAsB,EAAtB;;;AAGK,YAAMM,MAAM,mBAAZ;;AACJ,YAAIO,OAAO,CAACG,QAAR,CAAiBhB,IAAjB,EAAuBM,MAAvB,EAA+BW,QAAnC,EAA6C;AAE5C,cAAMC,kBAAkB,GAAGL,OAAO,CAACG,QAAR,CAAiBhB,IAAjB,EAAuBM,MAAvB,CAA3B;;AAGAO,UAAAA,OAAO,CAACG,QAAR,CAAiBhB,IAAjB,EAAuBM,MAAvB,IAAiC;AAChC,gBAAMa,YAAY,GAAGD,kBAAkB,MAAlB,mBAArB;;AAEA,gBAAIC,YAAJ,aAAIA,YAAJ,uBAAIA,YAAY,CAAEC,IAAlB,EAAwB;AACvBD,cAAAA,YAAY,CAACC,IAAb,CAAkB,UAACC,MAAD;AAEjBR,gBAAAA,OAAO,CAACG,QAAR,CAAiBjB,gBAAjB,EAAmCK,QAAnC,CAA4C;AAAEJ,kBAAAA,IAAI,EAAJA,IAAF;AAAQM,kBAAAA,MAAM,EAANA;AAAR,iBAA5C;AACA,uBAAOe,MAAP;AACA,eAJD;AAKA,aAND,MAMO;AAENR,cAAAA,OAAO,CAACG,QAAR,CAAiBjB,gBAAjB,EAAmCK,QAAnC,CAA4C;AAAEJ,gBAAAA,IAAI,EAAJA,IAAF;AAAQM,gBAAAA,MAAM,EAANA;AAAR,eAA5C;AACA;;AAED,mBAAOa,YAAP;AACA,WAfD;AAgBA;;;AAtBF,sCAAqBG,MAAM,CAACC,IAAP,CAAYR,YAAZ,CAArB,kCAAgD;AAAA;AAuB/C;AACD;AA1CK,GAAP;AA4CA,CAzED;;;;"}