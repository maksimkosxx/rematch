{"version":3,"file":"core.cjs.development.js","sources":["../src/reduxStore.ts","../src/validate.ts","../src/dispatcher.ts","../src/bag.ts","../src/rematchStore.ts","../src/config.ts","../src/index.ts"],"sourcesContent":["import * as Redux from 'redux'\nimport {\n\tAction,\n\tConfigRedux,\n\tModelReducers,\n\tNamedModel,\n\tRematchBag,\n\tDevtoolOptions,\n\tModels,\n\tRematchRootState,\n} from './types'\n\n/**\n * Creates 'combined' reducer for each model and then merges those reducers\n * together into a 'root' reducer. It then creates a Redux store with\n * middlewares and enhancers.\n */\nexport default function createReduxStore<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {},\n\tRootState = RematchRootState<TModels, TExtraModels>\n>(bag: RematchBag<TModels, TExtraModels>): Redux.Store<RootState> {\n\tfor (const model of bag.models) {\n\t\tcreateModelReducer(bag, model)\n\t}\n\n\tconst rootReducer = createRootReducer<RootState, TModels, TExtraModels>(bag)\n\n\tconst middlewares = Redux.applyMiddleware(...bag.reduxConfig.middlewares)\n\tconst enhancers = composeEnhancersWithDevtools(\n\t\tbag.reduxConfig.devtoolOptions\n\t)(...bag.reduxConfig.enhancers, middlewares)\n\n\tconst createStore = bag.reduxConfig.createStore || Redux.createStore\n\tconst bagInitialState = bag.reduxConfig.initialState\n\tconst initialState = bagInitialState === undefined ? {} : bagInitialState\n\n\treturn createStore<RootState, Action, any, typeof initialState>(\n\t\trootReducer,\n\t\tinitialState,\n\t\tenhancers\n\t)\n}\n\n/**\n * Creates a combined reducer for a given model. What it means is that:\n * - it forms an action name for each model's reducer as 'modelName/reducerKey'\n * - it creates a mapping from action name to its reducer\n * - it wraps the mapping with a function (combined reducer) that selects and\n *   runs a reducer based on the incoming action\n * - if the model also has a base reducer defined, it creates a function which\n *   first runs the incoming action through this reducer and then passes the\n *   resulting state and the same action to combined reducer\n *\n * The final result - a function, is returned.\n */\nexport function createModelReducer<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {},\n\tTState extends NamedModel<TModels>['state'] = any\n>(bag: RematchBag<TModels, TExtraModels>, model: NamedModel<TModels>): void {\n\tconst modelReducers: ModelReducers<TState> = {}\n\n\t// build action name for each reducer and create mapping from name to reducer\n\tfor (const reducerKey of Object.keys(model.reducers)) {\n\t\tconst actionName = isAlreadyActionName(reducerKey)\n\t\t\t? reducerKey\n\t\t\t: `${model.name}/${reducerKey}`\n\n\t\tmodelReducers[actionName] = model.reducers[reducerKey]\n\t}\n\n\t// select and run a reducer based on the incoming action\n\tconst combinedReducer = (\n\t\tstate: TState = model.state,\n\t\taction: Action\n\t): TState => {\n\t\tif (action.type in modelReducers) {\n\t\t\treturn modelReducers[action.type](state, action.payload)\n\t\t}\n\n\t\treturn state\n\t}\n\n\tconst modelBaseReducer = model.baseReducer\n\n\t// when baseReducer is defined, run the action first through it\n\tlet reducer = !modelBaseReducer\n\t\t? combinedReducer\n\t\t: (state: TState = model.state, action: Action): TState =>\n\t\t\t\tcombinedReducer(modelBaseReducer(state, action), action)\n\n\tbag.forEachPlugin('onReducer', (onReducer) => {\n\t\treducer = onReducer(reducer, model.name, bag) || reducer\n\t})\n\n\tbag.reduxConfig.reducers[model.name] = reducer\n}\n\n/**\n * It merges all reducers in config using mergeReducers function. Additionally,\n * if user supplied any rootReducers, a wrapper function around merged reducers\n * is created. It first feeds each into its corresponding 'root' reducer (if\n * it's available), and then passes on the resulting state to the merged reducer.\n */\nexport function createRootReducer<\n\tTRootState,\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(bag: RematchBag<TModels, TExtraModels>): Redux.Reducer<TRootState, Action> {\n\tconst { rootReducers } = bag.reduxConfig\n\tconst mergedReducers = mergeReducers<TRootState>(bag.reduxConfig)\n\tlet rootReducer = mergedReducers\n\n\tif (rootReducers && Object.keys(rootReducers).length) {\n\t\trootReducer = (\n\t\t\tstate: TRootState | undefined,\n\t\t\taction: Action\n\t\t): TRootState => {\n\t\t\tconst actionRootReducer = rootReducers[action.type]\n\n\t\t\tif (actionRootReducer) {\n\t\t\t\treturn mergedReducers(actionRootReducer(state, action), action)\n\t\t\t}\n\n\t\t\treturn mergedReducers(state, action)\n\t\t}\n\t}\n\n\tbag.forEachPlugin('onRootReducer', (onRootReducer) => {\n\t\trootReducer = onRootReducer(rootReducer, bag) || rootReducer\n\t})\n\n\treturn rootReducer\n}\n\n/**\n * Merges all reducers defined in config into one function using user supplied\n * or default combineReducers function.\n * If there are no reducers defined, it returns a function that just returns\n * the state for all incoming actions.\n */\nfunction mergeReducers<TRootState>(\n\treduxConfig: ConfigRedux<TRootState>\n): Redux.Reducer<TRootState, Action> {\n\tconst combineReducers = reduxConfig.combineReducers || Redux.combineReducers\n\n\tif (!Object.keys(reduxConfig.reducers).length) {\n\t\treturn (state: any): TRootState => state\n\t}\n\n\treturn combineReducers(reduxConfig.reducers as Redux.ReducersMapObject)\n}\n\n/**\n * Returns Redux Devtools compose method unless it's disabled, in which case it\n * returns default Redux.compose.\n */\nfunction composeEnhancersWithDevtools(\n\tdevtoolOptions: DevtoolOptions = {}\n): (...args: any[]) => Redux.StoreEnhancer {\n\tconst { disabled, ...options } = devtoolOptions\n\n\treturn !disabled &&\n\t\ttypeof window === 'object' &&\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n\t\t? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(options)\n\t\t: Redux.compose\n}\n\n/**\n * Determines if a reducer key is already an action name, for example -\n * a listener on another model.\n */\nfunction isAlreadyActionName(reducerKey: string): boolean {\n\treturn reducerKey.indexOf('/') > -1\n}\n","import {\n\tConfig,\n\tModelEffects,\n\tModelReducers,\n\tNamedModel,\n\tPlugin,\n\tModels,\n} from './types'\n\n/**\n * If the first item is true, it means there is an error described by\n * the second item.\n */\nexport type Validation = [boolean | undefined, string]\n\n/**\n * Checks if a parameter is a valid object.\n */\nexport const isObject = <T>(obj: T): boolean =>\n\ttypeof obj === 'object' && obj !== null && !Array.isArray(obj)\n\n/**\n * Checks if a parameter is a valid function but only when it's defined.\n * Otherwise, always returns true.\n */\nexport const ifDefinedIsFunction = <T>(func: T): boolean =>\n\t!func || typeof func === 'function'\n\n/**\n * Takes an array of arrays of validations. Collects all errors and throws.\n * Should be used by plugins to keep the validation behaviour the same for all\n * Rematch-related libraries.\n */\nconst validate = (runValidations: () => Validation[]): void => {\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tconst validations = runValidations()\n\t\tconst errors: string[] = []\n\n\t\tfor (const validation of validations) {\n\t\t\tconst isInvalid = validation[0]\n\t\t\tconst errorMessage = validation[1]\n\t\t\tif (isInvalid) {\n\t\t\t\terrors.push(errorMessage)\n\t\t\t}\n\t\t}\n\n\t\tif (errors.length > 0) {\n\t\t\tthrow new Error(errors.join(', '))\n\t\t}\n\t}\n}\n\nexport const validateConfig = <\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tconfig: Config<TModels, TExtraModels>\n): void => {\n\tvalidate(() => [\n\t\t[!Array.isArray(config.plugins), 'init config.plugins must be an array'],\n\t\t[!isObject(config.models), 'init config.models must be an object'],\n\t\t[\n\t\t\t!isObject(config.redux.reducers),\n\t\t\t'init config.redux.reducers must be an object',\n\t\t],\n\t\t[\n\t\t\t!Array.isArray(config.redux.middlewares),\n\t\t\t'init config.redux.middlewares must be an array',\n\t\t],\n\t\t[\n\t\t\t!Array.isArray(config.redux.enhancers),\n\t\t\t'init config.redux.enhancers must be an array of functions',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(config.redux.combineReducers),\n\t\t\t'init config.redux.combineReducers must be a function',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(config.redux.createStore),\n\t\t\t'init config.redux.createStore must be a function',\n\t\t],\n\t])\n}\n\nexport const validateModel = <\n\tTModels extends Models<TModels> = Record<string, any>\n>(\n\tmodel: NamedModel<TModels>\n): void => {\n\tvalidate(() => [\n\t\t[!model, 'model config is required'],\n\t\t[typeof model.name !== 'string', 'model \"name\" [string] is required'],\n\t\t[\n\t\t\tmodel.state === undefined && model.baseReducer === undefined,\n\t\t\t'model \"state\" is required',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(model.baseReducer),\n\t\t\t'model \"baseReducer\" must be a function',\n\t\t],\n\t])\n}\n\nexport const validatePlugin = <\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tplugin: Plugin<TModels, TExtraModels>\n): void => {\n\tvalidate(() => [\n\t\t[\n\t\t\t!ifDefinedIsFunction(plugin.onStoreCreated),\n\t\t\t'Plugin onStoreCreated must be a function',\n\t\t],\n\t\t[!ifDefinedIsFunction(plugin.onModel), 'Plugin onModel must be a function'],\n\t\t[\n\t\t\t!ifDefinedIsFunction(plugin.onReducer),\n\t\t\t'Plugin onReducer must be a function',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(plugin.onRootReducer),\n\t\t\t'Plugin onRootReducer must be a function',\n\t\t],\n\t\t[\n\t\t\t!ifDefinedIsFunction(plugin.createMiddleware),\n\t\t\t'Plugin createMiddleware must be a function',\n\t\t],\n\t])\n}\n\nexport const validateModelReducer = (\n\tmodelName: string,\n\treducers: ModelReducers,\n\treducerName: string\n): void => {\n\tvalidate(() => [\n\t\t[\n\t\t\t!!reducerName.match(/\\/.+\\//),\n\t\t\t`Invalid reducer name (${modelName}/${reducerName})`,\n\t\t],\n\t\t[\n\t\t\ttypeof reducers[reducerName] !== 'function',\n\t\t\t`Invalid reducer (${modelName}/${reducerName}). Must be a function`,\n\t\t],\n\t])\n}\n\nexport const validateModelEffect = <TModels extends Models<TModels>>(\n\tmodelName: string,\n\teffects: ModelEffects<TModels>,\n\teffectName: string\n): void => {\n\tvalidate(() => [\n\t\t[\n\t\t\t!!effectName.match(/\\//),\n\t\t\t`Invalid effect name (${modelName}/${effectName})`,\n\t\t],\n\t\t[\n\t\t\ttypeof effects[effectName] !== 'function',\n\t\t\t`Invalid effect (${modelName}/${effectName}). Must be a function`,\n\t\t],\n\t])\n}\n\nexport default validate\n","import {\n\tAction,\n\tModelEffects,\n\tModelEffectsCreator,\n\tModels,\n\tNamedModel,\n\tRematchBag,\n\tRematchDispatcher,\n\tEffectRematchDispatcher,\n\tRematchStore,\n} from './types'\nimport { validateModelEffect, validateModelReducer } from './validate'\n\n/**\n * Builds a dispatcher for given model name and action name. The dispatched\n * action will have a type `modelName/actionName`.\n * Additionally, adds the isEffect property to the created dispatcher.\n * isEffect helps to differentiate effects dispatchers from reducer dispatchers.\n */\nconst createActionDispatcher = <\n\tTModels extends Models<TModels> = Record<string, any>\n>(\n\trematch: RematchStore<TModels>,\n\tmodelName: string,\n\tactionName: string,\n\tisEffect: boolean\n): RematchDispatcher | EffectRematchDispatcher => {\n\treturn Object.assign(\n\t\t(payload?: any): Action => {\n\t\t\tconst action: Action = { type: `${modelName}/${actionName}` }\n\n\t\t\tif (typeof payload !== 'undefined') {\n\t\t\t\taction.payload = payload\n\t\t\t}\n\n\t\t\treturn rematch.dispatch(action)\n\t\t},\n\t\t{\n\t\t\tisEffect,\n\t\t}\n\t)\n}\n\n/**\n * Creates a dispatcher object for a model - it contains a mapping from all\n * reducers and effects *names* to functions which dispatch their corresponding\n * actions.\n */\nconst createDispatcher = <\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTModel extends NamedModel<TModels> = NamedModel\n>(\n\trematch: RematchStore<TModels>,\n\tbag: RematchBag<TModels>,\n\tmodel: TModel\n): void => {\n\tconst modelDispatcher = rematch.dispatch[model.name]\n\n\t// map reducer names to dispatch actions\n\tfor (const reducerName of Object.keys(model.reducers)) {\n\t\tvalidateModelReducer(model.name, model.reducers, reducerName)\n\n\t\tmodelDispatcher[reducerName] = createActionDispatcher(\n\t\t\trematch,\n\t\t\tmodel.name,\n\t\t\treducerName,\n\t\t\tfalse\n\t\t)\n\t}\n\n\tlet effects: ModelEffects<TModels> = {}\n\n\t// 'effects' might be actually a function creating effects\n\tif (model.effects) {\n\t\teffects =\n\t\t\ttypeof model.effects === 'function'\n\t\t\t\t? (model.effects as ModelEffectsCreator<TModels>)(rematch.dispatch)\n\t\t\t\t: model.effects\n\t}\n\n\t// map effects names to dispatch actions\n\tfor (const effectName of Object.keys(effects)) {\n\t\tvalidateModelEffect(model.name, effects, effectName)\n\n\t\tbag.effects[`${model.name}/${effectName}`] = effects[effectName].bind(\n\t\t\tmodelDispatcher\n\t\t)\n\n\t\tmodelDispatcher[effectName] = createActionDispatcher(\n\t\t\trematch,\n\t\t\tmodel.name,\n\t\t\teffectName,\n\t\t\ttrue\n\t\t)\n\t}\n}\n\nexport default createDispatcher\n","import { Config, Model, Models, NamedModel, RematchBag } from './types'\nimport { validateModel } from './validate'\n\n/**\n * Creates and returns a 'Rematch Bag', which is a set of configuration options\n * used by the Rematch library in various functions.\n */\nexport default function createRematchBag<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(config: Config<TModels, TExtraModels>): RematchBag<TModels, TExtraModels> {\n\treturn {\n\t\tmodels: createNamedModels(config.models),\n\t\treduxConfig: config.redux,\n\t\tforEachPlugin(method, fn): void {\n\t\t\tfor (const plugin of config.plugins) {\n\t\t\t\tif (plugin[method]) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t// temporary ignore, see: https://github.com/microsoft/TypeScript/issues/40429\n\t\t\t\t\tfn(plugin[method])\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\teffects: {},\n\t}\n}\n\n/**\n * Transforms mapping from a model name to a model object, into an array of\n * 'named' models - models with embedded name and default value for reducers\n * if user didn't provide any.\n */\nfunction createNamedModels<\n\tTModels extends Models<TModels> = Record<string, any>\n>(models: TModels): NamedModel<TModels>[] {\n\treturn Object.keys(models).map((modelName: string) => {\n\t\tconst model = createNamedModel(modelName, models[modelName])\n\t\tvalidateModel(model)\n\t\treturn model\n\t})\n}\n\n/**\n * Transforms a model into 'named' model - model which contains 'name' and\n * 'reducers' properties if user didn't provide any.\n */\nfunction createNamedModel<\n\tTModels extends Models<TModels> = Record<string, any>\n>(name: string, model: Model<TModels>): NamedModel<TModels> {\n\treturn {\n\t\tname,\n\t\treducers: {},\n\t\t...model,\n\t}\n}\n","import { Middleware } from 'redux'\nimport {\n\tAction,\n\tConfig,\n\tExposedFunction,\n\tModels,\n\tNamedModel,\n\tObjectNotAFunction,\n\tPlugin,\n\tRematchBag,\n\tRematchStore,\n\tModelDispatcher,\n\tRematchDispatch,\n} from './types'\nimport createReduxStore, {\n\tcreateModelReducer,\n\tcreateRootReducer,\n} from './reduxStore'\nimport createDispatcher from './dispatcher'\nimport { validateModel } from './validate'\nimport createRematchBag from './bag'\n\nexport default function createRematchStore<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(config: Config<TModels, TExtraModels>): RematchStore<TModels, TExtraModels> {\n\t// setup rematch 'bag' for storing useful values and functions\n\tconst bag = createRematchBag(config)\n\n\t// add middleware for handling effects\n\tbag.reduxConfig.middlewares.push(createEffectsMiddleware(bag))\n\n\t// collect middlewares from plugins\n\tbag.forEachPlugin('createMiddleware', (createMiddleware) => {\n\t\tbag.reduxConfig.middlewares.push(createMiddleware(bag))\n\t})\n\n\tconst reduxStore = createReduxStore(bag)\n\n\tlet rematchStore = {\n\t\t...reduxStore,\n\t\tname: config.name,\n\t\taddModel(model: NamedModel<TModels>) {\n\t\t\tvalidateModel(model)\n\t\t\tcreateModelReducer(bag, model)\n\t\t\tprepareModel(this, bag, model)\n\t\t\tthis.replaceReducer(createRootReducer(bag))\n\t\t\treduxStore.dispatch({ type: '@@redux/REPLACE' })\n\t\t},\n\t} as RematchStore<TModels, TExtraModels>\n\n\taddExposed(rematchStore, config.plugins)\n\n\trematchStore.addModel.bind(rematchStore)\n\n\t// generate dispatch[modelName][actionName] for all reducers and effects\n\tfor (const model of bag.models) {\n\t\tprepareModel(rematchStore, bag, model)\n\t}\n\n\tbag.forEachPlugin('onStoreCreated', (onStoreCreated) => {\n\t\trematchStore = onStoreCreated(rematchStore, bag) || rematchStore\n\t})\n\n\treturn rematchStore\n}\n\nfunction createEffectsMiddleware<\n\tTModels extends Models<TModels> = Record<string, any>\n>(bag: RematchBag<TModels>): Middleware {\n\treturn (store) => (next) => (action: Action): any => {\n\t\tif (action.type in bag.effects) {\n\t\t\t// first run reducer action if exists\n\t\t\tnext(action)\n\n\t\t\t// then run the effect and return its result\n\t\t\treturn bag.effects[action.type](action.payload, store.getState())\n\t\t}\n\n\t\treturn next(action)\n\t}\n}\n\nfunction prepareModel<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTModel extends NamedModel<TModels> = NamedModel\n>(\n\trematchStore: RematchStore<TModels>,\n\tbag: RematchBag<TModels>,\n\tmodel: TModel\n): void {\n\tconst modelDispatcher = {} as ModelDispatcher<TModel, TModels>\n\n\t// inject model so effects creator can access it\n\trematchStore.dispatch[\n\t\t`${model.name}` as keyof RematchDispatch<TModels>\n\t] = modelDispatcher\n\n\tcreateDispatcher(rematchStore, bag, model)\n\n\tbag.forEachPlugin('onModel', (onModel) => {\n\t\tonModel(model, rematchStore)\n\t})\n}\n\n/**\n * Adds properties exposed by plugins into the Rematch instance. If a exposed\n * property is a function, it passes rematch as the first argument.\n *\n * If you're implementing a plugin in TypeScript, extend Rematch namespace by\n * adding the properties that you exposed from your plugin.\n */\nfunction addExposed<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tstore: RematchStore<TModels, TExtraModels>,\n\tplugins: Plugin<TModels, TExtraModels>[]\n): void {\n\tfor (const plugin of plugins) {\n\t\tif (plugin.exposed) {\n\t\t\tfor (const key of Object.keys(plugin.exposed)) {\n\t\t\t\tconst exposedItem = plugin.exposed[key] as\n\t\t\t\t\t| ExposedFunction\n\t\t\t\t\t| ObjectNotAFunction\n\t\t\t\tconst isExposedFunction = typeof exposedItem === 'function'\n\n\t\t\t\tstore[key] = isExposedFunction\n\t\t\t\t\t? (...params: any[]): any =>\n\t\t\t\t\t\t\t(exposedItem as ExposedFunction)(store, ...params)\n\t\t\t\t\t: Object.create(plugin.exposed[key])\n\t\t\t}\n\t\t}\n\t}\n}\n","import { InitConfig, Config, Models } from './types'\nimport { validateConfig, validatePlugin } from './validate'\n\nlet count = 0\n\n/**\n * Builds complete Rematch config using default values for properties not\n * supplied by the user. Additionally, applies changes to the config made by\n * the plugins selected by the user.\n */\nexport default function createConfig<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tinitConfig: InitConfig<TModels, TExtraModels>\n): Config<TModels, TExtraModels> {\n\tconst storeName = initConfig.name ?? `Rematch Store ${count}`\n\n\tcount += 1\n\n\tconst config = {\n\t\tname: storeName,\n\t\tmodels: initConfig.models || {},\n\t\tplugins: initConfig.plugins || [],\n\t\tredux: {\n\t\t\treducers: {},\n\t\t\trootReducers: {},\n\t\t\tenhancers: [],\n\t\t\tmiddlewares: [],\n\t\t\t...initConfig.redux,\n\t\t\tdevtoolOptions: {\n\t\t\t\tname: storeName,\n\t\t\t\t...(initConfig.redux?.devtoolOptions ?? {}),\n\t\t\t},\n\t\t},\n\t} as Config\n\n\tvalidateConfig(config)\n\n\t// Apply changes to the config required by plugins\n\tfor (const plugin of config.plugins) {\n\t\tif (plugin.config) {\n\t\t\t// Collect new models\n\t\t\tconfig.models = merge(config.models, plugin.config.models)\n\n\t\t\t// Collect redux configuration changes\n\t\t\tif (plugin.config.redux) {\n\t\t\t\tconfig.redux.initialState = merge(\n\t\t\t\t\tconfig.redux.initialState,\n\t\t\t\t\tplugin.config.redux.initialState\n\t\t\t\t)\n\n\t\t\t\tconfig.redux.reducers = merge(\n\t\t\t\t\tconfig.redux.reducers,\n\t\t\t\t\tplugin.config.redux.reducers\n\t\t\t\t)\n\n\t\t\t\tconfig.redux.rootReducers = merge(\n\t\t\t\t\tconfig.redux.rootReducers,\n\t\t\t\t\tplugin.config.redux.reducers\n\t\t\t\t)\n\n\t\t\t\tconfig.redux.enhancers = [\n\t\t\t\t\t...config.redux.enhancers,\n\t\t\t\t\t...(plugin.config.redux.enhancers || []),\n\t\t\t\t]\n\n\t\t\t\tconfig.redux.middlewares = [\n\t\t\t\t\t...config.redux.middlewares,\n\t\t\t\t\t...(plugin.config.redux.middlewares || []),\n\t\t\t\t]\n\n\t\t\t\tconfig.redux.combineReducers =\n\t\t\t\t\tconfig.redux.combineReducers || plugin.config.redux.combineReducers\n\n\t\t\t\tconfig.redux.createStore =\n\t\t\t\t\tconfig.redux.createStore || plugin.config.redux.createStore\n\t\t\t}\n\t\t}\n\n\t\tvalidatePlugin(plugin)\n\t}\n\n\treturn config as Config<TModels, TExtraModels>\n}\n\n/**\n * Shallow merges original object with the extra object, giving the precedence\n * to the original object.\n */\nfunction merge<T extends object>(original: T, extra: T | undefined): T {\n\treturn extra ? { ...extra, ...original } : original\n}\n","import createRematchStore from './rematchStore'\nimport { InitConfig, Models, RematchStore, ModelCreator } from './types'\nimport createConfig from './config'\n\n/**\n * Prepares a complete configuration and creates a Rematch store.\n */\nexport const init = <\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tinitConfig?: InitConfig<TModels, TExtraModels>\n): RematchStore<TModels, TExtraModels> => {\n\tconst config = createConfig(initConfig || {})\n\treturn createRematchStore(config)\n}\n\nexport const createModel: ModelCreator = () => (mo): any => {\n\tconst { reducers = {}, effects = {} } = mo\n\n\treturn {\n\t\t...mo,\n\t\treducers,\n\t\teffects,\n\t}\n}\n\nexport default {\n\tinit,\n\tcreateModel,\n}\n\nexport * from './types'\n"],"names":["createReduxStore","bag","models","model","createModelReducer","rootReducer","createRootReducer","middlewares","Redux","reduxConfig","enhancers","composeEnhancersWithDevtools","devtoolOptions","createStore","bagInitialState","initialState","undefined","modelReducers","Object","keys","reducers","reducerKey","actionName","isAlreadyActionName","name","combinedReducer","state","action","type","payload","modelBaseReducer","baseReducer","reducer","forEachPlugin","onReducer","rootReducers","mergedReducers","mergeReducers","length","actionRootReducer","onRootReducer","combineReducers","disabled","options","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","indexOf","isObject","obj","Array","isArray","ifDefinedIsFunction","func","validate","runValidations","validations","errors","validation","isInvalid","errorMessage","push","Error","join","validateConfig","config","plugins","redux","validateModel","validatePlugin","plugin","onStoreCreated","onModel","createMiddleware","validateModelReducer","modelName","reducerName","match","validateModelEffect","effects","effectName","createActionDispatcher","rematch","isEffect","assign","dispatch","createDispatcher","modelDispatcher","bind","createRematchBag","createNamedModels","method","fn","map","createNamedModel","createRematchStore","createEffectsMiddleware","reduxStore","rematchStore","addModel","prepareModel","replaceReducer","addExposed","store","next","getState","exposed","key","exposedItem","isExposedFunction","params","create","count","createConfig","initConfig","storeName","merge","original","extra","init","createModel","mo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAiBwBA,iBAItBC;AACD,uDAAoBA,GAAG,CAACC,MAAxB,wCAAgC;AAAA,QAArBC,KAAqB;AAC/BC,IAAAA,kBAAkB,CAACH,GAAD,EAAME,KAAN,CAAlB;AACA;;AAED,MAAME,WAAW,GAAGC,iBAAiB,CAAmCL,GAAnC,CAArC;AAEA,MAAMM,WAAW,GAAGC,qBAAA,OAAAA,KAAK,EAAoBP,GAAG,CAACQ,WAAJ,CAAgBF,WAApC,CAAzB;AACA,MAAMG,SAAS,GAAGC,4BAA4B,CAC7CV,GAAG,CAACQ,WAAJ,CAAgBG,cAD6B,CAA5B,eAEbX,GAAG,CAACQ,WAAJ,CAAgBC,SAFH,SAEcH,WAFd,GAAlB;AAIA,MAAMM,WAAW,GAAGZ,GAAG,CAACQ,WAAJ,CAAgBI,WAAhB,IAA+BL,iBAAnD;AACA,MAAMM,eAAe,GAAGb,GAAG,CAACQ,WAAJ,CAAgBM,YAAxC;AACA,MAAMA,YAAY,GAAGD,eAAe,KAAKE,SAApB,GAAgC,EAAhC,GAAqCF,eAA1D;AAEA,SAAOD,WAAW,CACjBR,WADiB,EAEjBU,YAFiB,EAGjBL,SAHiB,CAAlB;AAKA;SAceN,mBAIdH,KAAwCE;AACzC,MAAMc,aAAa,GAA0B,EAA7C;;AAGA,kCAAyBC,MAAM,CAACC,IAAP,CAAYhB,KAAK,CAACiB,QAAlB,CAAzB,kCAAsD;AAAjD,QAAMC,UAAU,mBAAhB;AACJ,QAAMC,UAAU,GAAGC,mBAAmB,CAACF,UAAD,CAAnB,GAChBA,UADgB,GAEblB,KAAK,CAACqB,IAFO,SAECH,UAFpB;AAIAJ,IAAAA,aAAa,CAACK,UAAD,CAAb,GAA4BnB,KAAK,CAACiB,QAAN,CAAeC,UAAf,CAA5B;AACA;;AAGD,MAAMI,eAAe,GAAG,SAAlBA,eAAkB,CACvBC,KADuB,EAEvBC,MAFuB;QACvBD;AAAAA,MAAAA,QAAgBvB,KAAK,CAACuB;;;AAGtB,QAAIC,MAAM,CAACC,IAAP,IAAeX,aAAnB,EAAkC;AACjC,aAAOA,aAAa,CAACU,MAAM,CAACC,IAAR,CAAb,CAA2BF,KAA3B,EAAkCC,MAAM,CAACE,OAAzC,CAAP;AACA;;AAED,WAAOH,KAAP;AACA,GATD;;AAWA,MAAMI,gBAAgB,GAAG3B,KAAK,CAAC4B,WAA/B;AAGA,MAAIC,OAAO,GAAG,CAACF,gBAAD,GACXL,eADW,GAEX,UAACC,KAAD,EAA8BC,MAA9B;AAAA,QAACD,KAAD;AAACA,MAAAA,KAAD,GAAiBvB,KAAK,CAACuB,KAAvB;AAAA;;AAAA,WACAD,eAAe,CAACK,gBAAgB,CAACJ,KAAD,EAAQC,MAAR,CAAjB,EAAkCA,MAAlC,CADf;AAAA,GAFH;AAKA1B,EAAAA,GAAG,CAACgC,aAAJ,CAAkB,WAAlB,EAA+B,UAACC,SAAD;AAC9BF,IAAAA,OAAO,GAAGE,SAAS,CAACF,OAAD,EAAU7B,KAAK,CAACqB,IAAhB,EAAsBvB,GAAtB,CAAT,IAAuC+B,OAAjD;AACA,GAFD;AAIA/B,EAAAA,GAAG,CAACQ,WAAJ,CAAgBW,QAAhB,CAAyBjB,KAAK,CAACqB,IAA/B,IAAuCQ,OAAvC;AACA;SAQe1B,kBAIdL;MACOkC,eAAiBlC,GAAG,CAACQ,YAArB0B;AACR,MAAMC,cAAc,GAAGC,aAAa,CAAapC,GAAG,CAACQ,WAAjB,CAApC;AACA,MAAIJ,WAAW,GAAG+B,cAAlB;;AAEA,MAAID,YAAY,IAAIjB,MAAM,CAACC,IAAP,CAAYgB,YAAZ,EAA0BG,MAA9C,EAAsD;AACrDjC,IAAAA,WAAW,GAAG,qBACbqB,KADa,EAEbC,MAFa;AAIb,UAAMY,iBAAiB,GAAGJ,YAAY,CAACR,MAAM,CAACC,IAAR,CAAtC;;AAEA,UAAIW,iBAAJ,EAAuB;AACtB,eAAOH,cAAc,CAACG,iBAAiB,CAACb,KAAD,EAAQC,MAAR,CAAlB,EAAmCA,MAAnC,CAArB;AACA;;AAED,aAAOS,cAAc,CAACV,KAAD,EAAQC,MAAR,CAArB;AACA,KAXD;AAYA;;AAED1B,EAAAA,GAAG,CAACgC,aAAJ,CAAkB,eAAlB,EAAmC,UAACO,aAAD;AAClCnC,IAAAA,WAAW,GAAGmC,aAAa,CAACnC,WAAD,EAAcJ,GAAd,CAAb,IAAmCI,WAAjD;AACA,GAFD;AAIA,SAAOA,WAAP;AACA;;AAQD,SAASgC,aAAT,CACC5B,WADD;AAGC,MAAMgC,eAAe,GAAGhC,WAAW,CAACgC,eAAZ,IAA+BjC,qBAAvD;;AAEA,MAAI,CAACU,MAAM,CAACC,IAAP,CAAYV,WAAW,CAACW,QAAxB,EAAkCkB,MAAvC,EAA+C;AAC9C,WAAO,UAACZ,KAAD;AAAA,aAA4BA,KAA5B;AAAA,KAAP;AACA;;AAED,SAAOe,eAAe,CAAChC,WAAW,CAACW,QAAb,CAAtB;AACA;;AAMD,SAAST,4BAAT,CACCC,cADD;MACCA;AAAAA,IAAAA,iBAAiC;;;wBAEAA;MAAzB8B,2BAAAA;MAAaC;;AAErB,SAAO,CAACD,QAAD,IACN,OAAOE,MAAP,KAAkB,QADZ,IAENA,MAAM,CAACC,oCAFD,GAGJD,MAAM,CAACC,oCAAP,CAA4CF,OAA5C,CAHI,GAIJnC,aAJH;AAKA;;AAMD,SAASe,mBAAT,CAA6BF,UAA7B;AACC,SAAOA,UAAU,CAACyB,OAAX,CAAmB,GAAnB,IAA0B,CAAC,CAAlC;AACA;;AC9JM,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAIC,GAAJ;AAAA,SACvB,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAnC,IAA2C,CAACC,KAAK,CAACC,OAAN,CAAcF,GAAd,CADrB;AAAA,CAAjB;AAOP,AAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAIC,IAAJ;AAAA,SAClC,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,UADS;AAAA,CAA5B;;AAQP,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,cAAD;AAChB,EAA2C;AAC1C,QAAMC,WAAW,GAAGD,cAAc,EAAlC;AACA,QAAME,MAAM,GAAa,EAAzB;;AAEA,yDAAyBD,WAAzB,wCAAsC;AAAA,UAA3BE,UAA2B;AACrC,UAAMC,SAAS,GAAGD,UAAU,CAAC,CAAD,CAA5B;AACA,UAAME,YAAY,GAAGF,UAAU,CAAC,CAAD,CAA/B;;AACA,UAAIC,SAAJ,EAAe;AACdF,QAAAA,MAAM,CAACI,IAAP,CAAYD,YAAZ;AACA;AACD;;AAED,QAAIH,MAAM,CAAClB,MAAP,GAAgB,CAApB,EAAuB;AACtB,YAAM,IAAIuB,KAAJ,CAAUL,MAAM,CAACM,IAAP,CAAY,IAAZ,CAAV,CAAN;AACA;AACD;AACD,CAjBD;;AAmBA,AAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAI7BC,MAJ6B;AAM7BX,EAAAA,QAAQ,CAAC;AAAA,WAAM,CACd,CAAC,CAACJ,KAAK,CAACC,OAAN,CAAcc,MAAM,CAACC,OAArB,CAAF,EAAiC,sCAAjC,CADc,EAEd,CAAC,CAAClB,QAAQ,CAACiB,MAAM,CAAC9D,MAAR,CAAV,EAA2B,sCAA3B,CAFc,EAGd,CACC,CAAC6C,QAAQ,CAACiB,MAAM,CAACE,KAAP,CAAa9C,QAAd,CADV,EAEC,8CAFD,CAHc,EAOd,CACC,CAAC6B,KAAK,CAACC,OAAN,CAAcc,MAAM,CAACE,KAAP,CAAa3D,WAA3B,CADF,EAEC,gDAFD,CAPc,EAWd,CACC,CAAC0C,KAAK,CAACC,OAAN,CAAcc,MAAM,CAACE,KAAP,CAAaxD,SAA3B,CADF,EAEC,2DAFD,CAXc,EAed,CACC,CAACyC,mBAAmB,CAACa,MAAM,CAACE,KAAP,CAAazB,eAAd,CADrB,EAEC,sDAFD,CAfc,EAmBd,CACC,CAACU,mBAAmB,CAACa,MAAM,CAACE,KAAP,CAAarD,WAAd,CADrB,EAEC,kDAFD,CAnBc,CAAN;AAAA,GAAD,CAAR;AAwBA,CA9BM;AAgCP,AAAO,IAAMsD,aAAa,GAAG,SAAhBA,aAAgB,CAG5BhE,KAH4B;AAK5BkD,EAAAA,QAAQ,CAAC;AAAA,WAAM,CACd,CAAC,CAAClD,KAAF,EAAS,0BAAT,CADc,EAEd,CAAC,OAAOA,KAAK,CAACqB,IAAb,KAAsB,QAAvB,EAAiC,mCAAjC,CAFc,EAGd,CACCrB,KAAK,CAACuB,KAAN,KAAgBV,SAAhB,IAA6Bb,KAAK,CAAC4B,WAAN,KAAsBf,SADpD,EAEC,2BAFD,CAHc,EAOd,CACC,CAACmC,mBAAmB,CAAChD,KAAK,CAAC4B,WAAP,CADrB,EAEC,wCAFD,CAPc,CAAN;AAAA,GAAD,CAAR;AAYA,CAjBM;AAmBP,AAAO,IAAMqC,cAAc,GAAG,SAAjBA,cAAiB,CAI7BC,MAJ6B;AAM7BhB,EAAAA,QAAQ,CAAC;AAAA,WAAM,CACd,CACC,CAACF,mBAAmB,CAACkB,MAAM,CAACC,cAAR,CADrB,EAEC,0CAFD,CADc,EAKd,CAAC,CAACnB,mBAAmB,CAACkB,MAAM,CAACE,OAAR,CAArB,EAAuC,mCAAvC,CALc,EAMd,CACC,CAACpB,mBAAmB,CAACkB,MAAM,CAACnC,SAAR,CADrB,EAEC,qCAFD,CANc,EAUd,CACC,CAACiB,mBAAmB,CAACkB,MAAM,CAAC7B,aAAR,CADrB,EAEC,yCAFD,CAVc,EAcd,CACC,CAACW,mBAAmB,CAACkB,MAAM,CAACG,gBAAR,CADrB,EAEC,4CAFD,CAdc,CAAN;AAAA,GAAD,CAAR;AAmBA,CAzBM;AA2BP,AAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CACnCC,SADmC,EAEnCtD,QAFmC,EAGnCuD,WAHmC;AAKnCtB,EAAAA,QAAQ,CAAC;AAAA,WAAM,CACd,CACC,CAAC,CAACsB,WAAW,CAACC,KAAZ,CAAkB,QAAlB,CADH,6BAE0BF,SAF1B,SAEuCC,WAFvC,OADc,EAKd,CACC,OAAOvD,QAAQ,CAACuD,WAAD,CAAf,KAAiC,UADlC,wBAEqBD,SAFrB,SAEkCC,WAFlC,2BALc,CAAN;AAAA,GAAD,CAAR;AAUA,CAfM;AAiBP,AAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAClCH,SADkC,EAElCI,OAFkC,EAGlCC,UAHkC;AAKlC1B,EAAAA,QAAQ,CAAC;AAAA,WAAM,CACd,CACC,CAAC,CAAC0B,UAAU,CAACH,KAAX,CAAiB,IAAjB,CADH,4BAEyBF,SAFzB,SAEsCK,UAFtC,OADc,EAKd,CACC,OAAOD,OAAO,CAACC,UAAD,CAAd,KAA+B,UADhC,uBAEoBL,SAFpB,SAEiCK,UAFjC,2BALc,CAAN;AAAA,GAAD,CAAR;AAUA,CAfM;;AChIP,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAG9BC,OAH8B,EAI9BP,SAJ8B,EAK9BpD,UAL8B,EAM9B4D,QAN8B;AAQ9B,SAAOhE,MAAM,CAACiE,MAAP,CACN,UAACtD,OAAD;AACC,QAAMF,MAAM,GAAW;AAAEC,MAAAA,IAAI,EAAK8C,SAAL,SAAkBpD;AAAxB,KAAvB;;AAEA,QAAI,OAAOO,OAAP,KAAmB,WAAvB,EAAoC;AACnCF,MAAAA,MAAM,CAACE,OAAP,GAAiBA,OAAjB;AACA;;AAED,WAAOoD,OAAO,CAACG,QAAR,CAAiBzD,MAAjB,CAAP;AACA,GATK,EAUN;AACCuD,IAAAA,QAAQ,EAARA;AADD,GAVM,CAAP;AAcA,CAtBD;;AA6BA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAIxBJ,OAJwB,EAKxBhF,GALwB,EAMxBE,KANwB;AAQxB,MAAMmF,eAAe,GAAGL,OAAO,CAACG,QAAR,CAAiBjF,KAAK,CAACqB,IAAvB,CAAxB;;AAGA,kCAA0BN,MAAM,CAACC,IAAP,CAAYhB,KAAK,CAACiB,QAAlB,CAA1B,kCAAuD;AAAlD,QAAMuD,WAAW,mBAAjB;AACJF,IAAAA,oBAAoB,CAACtE,KAAK,CAACqB,IAAP,EAAarB,KAAK,CAACiB,QAAnB,EAA6BuD,WAA7B,CAApB;AAEAW,IAAAA,eAAe,CAACX,WAAD,CAAf,GAA+BK,sBAAsB,CACpDC,OADoD,EAEpD9E,KAAK,CAACqB,IAF8C,EAGpDmD,WAHoD,EAIpD,KAJoD,CAArD;AAMA;;AAED,MAAIG,OAAO,GAA0B,EAArC;;AAGA,MAAI3E,KAAK,CAAC2E,OAAV,EAAmB;AAClBA,IAAAA,OAAO,GACN,OAAO3E,KAAK,CAAC2E,OAAb,KAAyB,UAAzB,GACI3E,KAAK,CAAC2E,OAAN,CAA+CG,OAAO,CAACG,QAAvD,CADJ,GAEGjF,KAAK,CAAC2E,OAHV;AAIA;;AAGD,oCAAyB5D,MAAM,CAACC,IAAP,CAAY2D,OAAZ,CAAzB,qCAA+C;AAA1C,QAAMC,UAAU,qBAAhB;AACJF,IAAAA,mBAAmB,CAAC1E,KAAK,CAACqB,IAAP,EAAasD,OAAb,EAAsBC,UAAtB,CAAnB;AAEA9E,IAAAA,GAAG,CAAC6E,OAAJ,CAAe3E,KAAK,CAACqB,IAArB,SAA6BuD,UAA7B,IAA6CD,OAAO,CAACC,UAAD,CAAP,CAAoBQ,IAApB,CAC5CD,eAD4C,CAA7C;AAIAA,IAAAA,eAAe,CAACP,UAAD,CAAf,GAA8BC,sBAAsB,CACnDC,OADmD,EAEnD9E,KAAK,CAACqB,IAF6C,EAGnDuD,UAHmD,EAInD,IAJmD,CAApD;AAMA;AACD,CA/CD;;SCzCwBS,iBAGtBxB;AACD,SAAO;AACN9D,IAAAA,MAAM,EAAEuF,iBAAiB,CAACzB,MAAM,CAAC9D,MAAR,CADnB;AAENO,IAAAA,WAAW,EAAEuD,MAAM,CAACE,KAFd;AAGNjC,IAAAA,aAHM,yBAGQyD,MAHR,EAGgBC,EAHhB;AAIL,2DAAqB3B,MAAM,CAACC,OAA5B,wCAAqC;AAAA,YAA1BI,MAA0B;;AACpC,YAAIA,MAAM,CAACqB,MAAD,CAAV,EAAoB;AAGnBC,UAAAA,EAAE,CAACtB,MAAM,CAACqB,MAAD,CAAP,CAAF;AACA;AACD;AACD,KAXK;AAYNZ,IAAAA,OAAO,EAAE;AAZH,GAAP;AAcA;;AAOD,SAASW,iBAAT,CAEEvF,MAFF;AAGC,SAAOgB,MAAM,CAACC,IAAP,CAAYjB,MAAZ,EAAoB0F,GAApB,CAAwB,UAAClB,SAAD;AAC9B,QAAMvE,KAAK,GAAG0F,gBAAgB,CAACnB,SAAD,EAAYxE,MAAM,CAACwE,SAAD,CAAlB,CAA9B;AACAP,IAAAA,aAAa,CAAChE,KAAD,CAAb;AACA,WAAOA,KAAP;AACA,GAJM,CAAP;AAKA;;AAMD,SAAS0F,gBAAT,CAEErE,IAFF,EAEgBrB,KAFhB;AAGC;AACCqB,IAAAA,IAAI,EAAJA,IADD;AAECJ,IAAAA,QAAQ,EAAE;AAFX,KAGIjB,KAHJ;AAKA;;SChCuB2F,mBAGtB9B;AAED,MAAM/D,GAAG,GAAGuF,gBAAgB,CAACxB,MAAD,CAA5B;AAGA/D,EAAAA,GAAG,CAACQ,WAAJ,CAAgBF,WAAhB,CAA4BqD,IAA5B,CAAiCmC,uBAAuB,CAAC9F,GAAD,CAAxD;AAGAA,EAAAA,GAAG,CAACgC,aAAJ,CAAkB,kBAAlB,EAAsC,UAACuC,gBAAD;AACrCvE,IAAAA,GAAG,CAACQ,WAAJ,CAAgBF,WAAhB,CAA4BqD,IAA5B,CAAiCY,gBAAgB,CAACvE,GAAD,CAAjD;AACA,GAFD;AAIA,MAAM+F,UAAU,GAAGhG,gBAAgB,CAACC,GAAD,CAAnC;;AAEA,MAAIgG,YAAY,gBACZD,UADY;AAEfxE,IAAAA,IAAI,EAAEwC,MAAM,CAACxC,IAFE;AAGf0E,IAAAA,QAHe,oBAGN/F,KAHM;AAIdgE,MAAAA,aAAa,CAAChE,KAAD,CAAb;AACAC,MAAAA,kBAAkB,CAACH,GAAD,EAAME,KAAN,CAAlB;AACAgG,MAAAA,YAAY,CAAC,IAAD,EAAOlG,GAAP,EAAYE,KAAZ,CAAZ;AACA,WAAKiG,cAAL,CAAoB9F,iBAAiB,CAACL,GAAD,CAArC;AACA+F,MAAAA,UAAU,CAACZ,QAAX,CAAoB;AAAExD,QAAAA,IAAI,EAAE;AAAR,OAApB;AACA;AATc,IAAhB;;AAYAyE,EAAAA,UAAU,CAACJ,YAAD,EAAejC,MAAM,CAACC,OAAtB,CAAV;AAEAgC,EAAAA,YAAY,CAACC,QAAb,CAAsBX,IAAtB,CAA2BU,YAA3B;;AAGA,uDAAoBhG,GAAG,CAACC,MAAxB,wCAAgC;AAAA,QAArBC,KAAqB;AAC/BgG,IAAAA,YAAY,CAACF,YAAD,EAAehG,GAAf,EAAoBE,KAApB,CAAZ;AACA;;AAEDF,EAAAA,GAAG,CAACgC,aAAJ,CAAkB,gBAAlB,EAAoC,UAACqC,cAAD;AACnC2B,IAAAA,YAAY,GAAG3B,cAAc,CAAC2B,YAAD,EAAehG,GAAf,CAAd,IAAqCgG,YAApD;AACA,GAFD;AAIA,SAAOA,YAAP;AACA;;AAED,SAASF,uBAAT,CAEE9F,GAFF;AAGC,SAAO,UAACqG,KAAD;AAAA,WAAW,UAACC,IAAD;AAAA,aAAU,UAAC5E,MAAD;AAC3B,YAAIA,MAAM,CAACC,IAAP,IAAe3B,GAAG,CAAC6E,OAAvB,EAAgC;AAE/ByB,UAAAA,IAAI,CAAC5E,MAAD,CAAJ;AAGA,iBAAO1B,GAAG,CAAC6E,OAAJ,CAAYnD,MAAM,CAACC,IAAnB,EAAyBD,MAAM,CAACE,OAAhC,EAAyCyE,KAAK,CAACE,QAAN,EAAzC,CAAP;AACA;;AAED,eAAOD,IAAI,CAAC5E,MAAD,CAAX;AACA,OAViB;AAAA,KAAX;AAAA,GAAP;AAWA;;AAED,SAASwE,YAAT,CAICF,YAJD,EAKChG,GALD,EAMCE,KAND;AAQC,MAAMmF,eAAe,GAAG,EAAxB;AAGAW,EAAAA,YAAY,CAACb,QAAb,MACIjF,KAAK,CAACqB,IADV,IAEI8D,eAFJ;AAIAD,EAAAA,gBAAgB,CAACY,YAAD,EAAehG,GAAf,EAAoBE,KAApB,CAAhB;AAEAF,EAAAA,GAAG,CAACgC,aAAJ,CAAkB,SAAlB,EAA6B,UAACsC,OAAD;AAC5BA,IAAAA,OAAO,CAACpE,KAAD,EAAQ8F,YAAR,CAAP;AACA,GAFD;AAGA;;AASD,SAASI,UAAT,CAICC,KAJD,EAKCrC,OALD;AAOC,wDAAqBA,OAArB,2CAA8B;AAAA,QAAnBI,MAAmB;;AAC7B,QAAIA,MAAM,CAACoC,OAAX,EAAoB;AAAA;AACd,YAAMC,GAAG,mBAAT;AACJ,YAAMC,WAAW,GAAGtC,MAAM,CAACoC,OAAP,CAAeC,GAAf,CAApB;AAGA,YAAME,iBAAiB,GAAG,OAAOD,WAAP,KAAuB,UAAjD;AAEAL,QAAAA,KAAK,CAACI,GAAD,CAAL,GAAaE,iBAAiB,GAC3B;AAAA,4CAAIC,MAAJ;AAAIA,YAAAA,MAAJ;AAAA;;AAAA,iBACCF,WAA+B,MAA/B,UAAgCL,KAAhC,SAA0CO,MAA1C,EADD;AAAA,SAD2B,GAG3B3F,MAAM,CAAC4F,MAAP,CAAczC,MAAM,CAACoC,OAAP,CAAeC,GAAf,CAAd,CAHH;AAPkB;;AACnB,sCAAkBxF,MAAM,CAACC,IAAP,CAAYkD,MAAM,CAACoC,OAAnB,CAAlB,kCAA+C;AAAA;AAU9C;AACD;AACD;AACD;;ACnID,IAAIM,KAAK,GAAG,CAAZ;AAOA,SAAwBC,aAIvBC;;;AAEA,MAAMC,SAAS,uBAAGD,UAAU,CAACzF,IAAd,kFAAuCuF,KAAtD;AAEAA,EAAAA,KAAK,IAAI,CAAT;AAEA,MAAM/C,MAAM,GAAG;AACdxC,IAAAA,IAAI,EAAE0F,SADQ;AAEdhH,IAAAA,MAAM,EAAE+G,UAAU,CAAC/G,MAAX,IAAqB,EAFf;AAGd+D,IAAAA,OAAO,EAAEgD,UAAU,CAAChD,OAAX,IAAsB,EAHjB;AAIdC,IAAAA,KAAK;AACJ9C,MAAAA,QAAQ,EAAE,EADN;AAEJe,MAAAA,YAAY,EAAE,EAFV;AAGJzB,MAAAA,SAAS,EAAE,EAHP;AAIJH,MAAAA,WAAW,EAAE;AAJT,OAKD0G,UAAU,CAAC/C,KALV;AAMJtD,MAAAA,cAAc;AACbY,QAAAA,IAAI,EAAE0F;AADO,uDAETD,UAAU,CAAC/C,KAFF,sDAET,kBAAkBtD,cAFT,yEAE2B,EAF3B;AANV;AAJS,GAAf;AAiBAmD,EAAAA,cAAc,CAACC,MAAD,CAAd;;AAGA,uDAAqBA,MAAM,CAACC,OAA5B,wCAAqC;AAAA,QAA1BI,MAA0B;;AACpC,QAAIA,MAAM,CAACL,MAAX,EAAmB;AAElBA,MAAAA,MAAM,CAAC9D,MAAP,GAAgBiH,KAAK,CAACnD,MAAM,CAAC9D,MAAR,EAAgBmE,MAAM,CAACL,MAAP,CAAc9D,MAA9B,CAArB;;AAGA,UAAImE,MAAM,CAACL,MAAP,CAAcE,KAAlB,EAAyB;AACxBF,QAAAA,MAAM,CAACE,KAAP,CAAanD,YAAb,GAA4BoG,KAAK,CAChCnD,MAAM,CAACE,KAAP,CAAanD,YADmB,EAEhCsD,MAAM,CAACL,MAAP,CAAcE,KAAd,CAAoBnD,YAFY,CAAjC;AAKAiD,QAAAA,MAAM,CAACE,KAAP,CAAa9C,QAAb,GAAwB+F,KAAK,CAC5BnD,MAAM,CAACE,KAAP,CAAa9C,QADe,EAE5BiD,MAAM,CAACL,MAAP,CAAcE,KAAd,CAAoB9C,QAFQ,CAA7B;AAKA4C,QAAAA,MAAM,CAACE,KAAP,CAAa/B,YAAb,GAA4BgF,KAAK,CAChCnD,MAAM,CAACE,KAAP,CAAa/B,YADmB,EAEhCkC,MAAM,CAACL,MAAP,CAAcE,KAAd,CAAoB9C,QAFY,CAAjC;AAKA4C,QAAAA,MAAM,CAACE,KAAP,CAAaxD,SAAb,aACIsD,MAAM,CAACE,KAAP,CAAaxD,SADjB,EAEK2D,MAAM,CAACL,MAAP,CAAcE,KAAd,CAAoBxD,SAApB,IAAiC,EAFtC;AAKAsD,QAAAA,MAAM,CAACE,KAAP,CAAa3D,WAAb,aACIyD,MAAM,CAACE,KAAP,CAAa3D,WADjB,EAEK8D,MAAM,CAACL,MAAP,CAAcE,KAAd,CAAoB3D,WAApB,IAAmC,EAFxC;AAKAyD,QAAAA,MAAM,CAACE,KAAP,CAAazB,eAAb,GACCuB,MAAM,CAACE,KAAP,CAAazB,eAAb,IAAgC4B,MAAM,CAACL,MAAP,CAAcE,KAAd,CAAoBzB,eADrD;AAGAuB,QAAAA,MAAM,CAACE,KAAP,CAAarD,WAAb,GACCmD,MAAM,CAACE,KAAP,CAAarD,WAAb,IAA4BwD,MAAM,CAACL,MAAP,CAAcE,KAAd,CAAoBrD,WADjD;AAEA;AACD;;AAEDuD,IAAAA,cAAc,CAACC,MAAD,CAAd;AACA;;AAED,SAAOL,MAAP;AACA;;AAMD,SAASmD,KAAT,CAAiCC,QAAjC,EAA8CC,KAA9C;AACC,SAAOA,KAAK,gBAAQA,KAAR,EAAkBD,QAAlB,IAA+BA,QAA3C;AACA;;ICrFYE,IAAI,GAAG,SAAPA,IAAO,CAInBL,UAJmB;AAMnB,MAAMjD,MAAM,GAAGgD,YAAY,CAACC,UAAU,IAAI,EAAf,CAA3B;AACA,SAAOnB,kBAAkB,CAAC9B,MAAD,CAAzB;AACA,CARM;AAUP,IAAauD,WAAW,GAAiB,SAA5BA,WAA4B;AAAA,SAAM,UAACC,EAAD;uBACNA,GAAhCpG;QAAAA,qCAAW;sBAAqBoG,GAAjB1C;QAAAA,mCAAU;AAEjC,wBACI0C,EADJ;AAECpG,MAAAA,QAAQ,EAARA,QAFD;AAGC0D,MAAAA,OAAO,EAAPA;AAHD;AAKA,GARwC;AAAA,CAAlC;AAUP,YAAe;AACdwC,EAAAA,IAAI,EAAJA,IADc;AAEdC,EAAAA,WAAW,EAAXA;AAFc,CAAf;;;;;;"}