{"version":3,"file":"core.umd.production.min.js","sources":["../src/reduxStore.ts","../src/dispatcher.ts","../src/rematchStore.ts","../src/config.ts","../src/index.ts","../src/bag.ts"],"sourcesContent":["import * as Redux from 'redux'\nimport {\n\tAction,\n\tConfigRedux,\n\tModelReducers,\n\tNamedModel,\n\tRematchBag,\n\tDevtoolOptions,\n\tModels,\n\tRematchRootState,\n} from './types'\n\n/**\n * Creates 'combined' reducer for each model and then merges those reducers\n * together into a 'root' reducer. It then creates a Redux store with\n * middlewares and enhancers.\n */\nexport default function createReduxStore<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {},\n\tRootState = RematchRootState<TModels, TExtraModels>\n>(bag: RematchBag<TModels, TExtraModels>): Redux.Store<RootState> {\n\tfor (const model of bag.models) {\n\t\tcreateModelReducer(bag, model)\n\t}\n\n\tconst rootReducer = createRootReducer<RootState, TModels, TExtraModels>(bag)\n\n\tconst middlewares = Redux.applyMiddleware(...bag.reduxConfig.middlewares)\n\tconst enhancers = composeEnhancersWithDevtools(\n\t\tbag.reduxConfig.devtoolOptions\n\t)(...bag.reduxConfig.enhancers, middlewares)\n\n\tconst createStore = bag.reduxConfig.createStore || Redux.createStore\n\tconst bagInitialState = bag.reduxConfig.initialState\n\tconst initialState = bagInitialState === undefined ? {} : bagInitialState\n\n\treturn createStore<RootState, Action, any, typeof initialState>(\n\t\trootReducer,\n\t\tinitialState,\n\t\tenhancers\n\t)\n}\n\n/**\n * Creates a combined reducer for a given model. What it means is that:\n * - it forms an action name for each model's reducer as 'modelName/reducerKey'\n * - it creates a mapping from action name to its reducer\n * - it wraps the mapping with a function (combined reducer) that selects and\n *   runs a reducer based on the incoming action\n * - if the model also has a base reducer defined, it creates a function which\n *   first runs the incoming action through this reducer and then passes the\n *   resulting state and the same action to combined reducer\n *\n * The final result - a function, is returned.\n */\nexport function createModelReducer<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {},\n\tTState extends NamedModel<TModels>['state'] = any\n>(bag: RematchBag<TModels, TExtraModels>, model: NamedModel<TModels>): void {\n\tconst modelReducers: ModelReducers<TState> = {}\n\n\t// build action name for each reducer and create mapping from name to reducer\n\tfor (const reducerKey of Object.keys(model.reducers)) {\n\t\tconst actionName = isAlreadyActionName(reducerKey)\n\t\t\t? reducerKey\n\t\t\t: `${model.name}/${reducerKey}`\n\n\t\tmodelReducers[actionName] = model.reducers[reducerKey]\n\t}\n\n\t// select and run a reducer based on the incoming action\n\tconst combinedReducer = (\n\t\tstate: TState = model.state,\n\t\taction: Action\n\t): TState => {\n\t\tif (action.type in modelReducers) {\n\t\t\treturn modelReducers[action.type](state, action.payload)\n\t\t}\n\n\t\treturn state\n\t}\n\n\tconst modelBaseReducer = model.baseReducer\n\n\t// when baseReducer is defined, run the action first through it\n\tlet reducer = !modelBaseReducer\n\t\t? combinedReducer\n\t\t: (state: TState = model.state, action: Action): TState =>\n\t\t\t\tcombinedReducer(modelBaseReducer(state, action), action)\n\n\tbag.forEachPlugin('onReducer', (onReducer) => {\n\t\treducer = onReducer(reducer, model.name, bag) || reducer\n\t})\n\n\tbag.reduxConfig.reducers[model.name] = reducer\n}\n\n/**\n * It merges all reducers in config using mergeReducers function. Additionally,\n * if user supplied any rootReducers, a wrapper function around merged reducers\n * is created. It first feeds each into its corresponding 'root' reducer (if\n * it's available), and then passes on the resulting state to the merged reducer.\n */\nexport function createRootReducer<\n\tTRootState,\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(bag: RematchBag<TModels, TExtraModels>): Redux.Reducer<TRootState, Action> {\n\tconst { rootReducers } = bag.reduxConfig\n\tconst mergedReducers = mergeReducers<TRootState>(bag.reduxConfig)\n\tlet rootReducer = mergedReducers\n\n\tif (rootReducers && Object.keys(rootReducers).length) {\n\t\trootReducer = (\n\t\t\tstate: TRootState | undefined,\n\t\t\taction: Action\n\t\t): TRootState => {\n\t\t\tconst actionRootReducer = rootReducers[action.type]\n\n\t\t\tif (actionRootReducer) {\n\t\t\t\treturn mergedReducers(actionRootReducer(state, action), action)\n\t\t\t}\n\n\t\t\treturn mergedReducers(state, action)\n\t\t}\n\t}\n\n\tbag.forEachPlugin('onRootReducer', (onRootReducer) => {\n\t\trootReducer = onRootReducer(rootReducer, bag) || rootReducer\n\t})\n\n\treturn rootReducer\n}\n\n/**\n * Merges all reducers defined in config into one function using user supplied\n * or default combineReducers function.\n * If there are no reducers defined, it returns a function that just returns\n * the state for all incoming actions.\n */\nfunction mergeReducers<TRootState>(\n\treduxConfig: ConfigRedux<TRootState>\n): Redux.Reducer<TRootState, Action> {\n\tconst combineReducers = reduxConfig.combineReducers || Redux.combineReducers\n\n\tif (!Object.keys(reduxConfig.reducers).length) {\n\t\treturn (state: any): TRootState => state\n\t}\n\n\treturn combineReducers(reduxConfig.reducers as Redux.ReducersMapObject)\n}\n\n/**\n * Returns Redux Devtools compose method unless it's disabled, in which case it\n * returns default Redux.compose.\n */\nfunction composeEnhancersWithDevtools(\n\tdevtoolOptions: DevtoolOptions = {}\n): (...args: any[]) => Redux.StoreEnhancer {\n\tconst { disabled, ...options } = devtoolOptions\n\n\treturn !disabled &&\n\t\ttypeof window === 'object' &&\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n\t\t? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(options)\n\t\t: Redux.compose\n}\n\n/**\n * Determines if a reducer key is already an action name, for example -\n * a listener on another model.\n */\nfunction isAlreadyActionName(reducerKey: string): boolean {\n\treturn reducerKey.indexOf('/') > -1\n}\n","import {\n\tAction,\n\tModelEffects,\n\tModelEffectsCreator,\n\tModels,\n\tNamedModel,\n\tRematchBag,\n\tRematchDispatcher,\n\tEffectRematchDispatcher,\n\tRematchStore,\n} from './types'\nimport { validateModelEffect, validateModelReducer } from './validate'\n\n/**\n * Builds a dispatcher for given model name and action name. The dispatched\n * action will have a type `modelName/actionName`.\n * Additionally, adds the isEffect property to the created dispatcher.\n * isEffect helps to differentiate effects dispatchers from reducer dispatchers.\n */\nconst createActionDispatcher = <\n\tTModels extends Models<TModels> = Record<string, any>\n>(\n\trematch: RematchStore<TModels>,\n\tmodelName: string,\n\tactionName: string,\n\tisEffect: boolean\n): RematchDispatcher | EffectRematchDispatcher => {\n\treturn Object.assign(\n\t\t(payload?: any): Action => {\n\t\t\tconst action: Action = { type: `${modelName}/${actionName}` }\n\n\t\t\tif (typeof payload !== 'undefined') {\n\t\t\t\taction.payload = payload\n\t\t\t}\n\n\t\t\treturn rematch.dispatch(action)\n\t\t},\n\t\t{\n\t\t\tisEffect,\n\t\t}\n\t)\n}\n\n/**\n * Creates a dispatcher object for a model - it contains a mapping from all\n * reducers and effects *names* to functions which dispatch their corresponding\n * actions.\n */\nconst createDispatcher = <\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTModel extends NamedModel<TModels> = NamedModel\n>(\n\trematch: RematchStore<TModels>,\n\tbag: RematchBag<TModels>,\n\tmodel: TModel\n): void => {\n\tconst modelDispatcher = rematch.dispatch[model.name]\n\n\t// map reducer names to dispatch actions\n\tfor (const reducerName of Object.keys(model.reducers)) {\n\t\tvalidateModelReducer(model.name, model.reducers, reducerName)\n\n\t\tmodelDispatcher[reducerName] = createActionDispatcher(\n\t\t\trematch,\n\t\t\tmodel.name,\n\t\t\treducerName,\n\t\t\tfalse\n\t\t)\n\t}\n\n\tlet effects: ModelEffects<TModels> = {}\n\n\t// 'effects' might be actually a function creating effects\n\tif (model.effects) {\n\t\teffects =\n\t\t\ttypeof model.effects === 'function'\n\t\t\t\t? (model.effects as ModelEffectsCreator<TModels>)(rematch.dispatch)\n\t\t\t\t: model.effects\n\t}\n\n\t// map effects names to dispatch actions\n\tfor (const effectName of Object.keys(effects)) {\n\t\tvalidateModelEffect(model.name, effects, effectName)\n\n\t\tbag.effects[`${model.name}/${effectName}`] = effects[effectName].bind(\n\t\t\tmodelDispatcher\n\t\t)\n\n\t\tmodelDispatcher[effectName] = createActionDispatcher(\n\t\t\trematch,\n\t\t\tmodel.name,\n\t\t\teffectName,\n\t\t\ttrue\n\t\t)\n\t}\n}\n\nexport default createDispatcher\n","import { Middleware } from 'redux'\nimport {\n\tAction,\n\tConfig,\n\tExposedFunction,\n\tModels,\n\tNamedModel,\n\tObjectNotAFunction,\n\tPlugin,\n\tRematchBag,\n\tRematchStore,\n\tModelDispatcher,\n\tRematchDispatch,\n} from './types'\nimport createReduxStore, {\n\tcreateModelReducer,\n\tcreateRootReducer,\n} from './reduxStore'\nimport createDispatcher from './dispatcher'\nimport { validateModel } from './validate'\nimport createRematchBag from './bag'\n\nexport default function createRematchStore<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(config: Config<TModels, TExtraModels>): RematchStore<TModels, TExtraModels> {\n\t// setup rematch 'bag' for storing useful values and functions\n\tconst bag = createRematchBag(config)\n\n\t// add middleware for handling effects\n\tbag.reduxConfig.middlewares.push(createEffectsMiddleware(bag))\n\n\t// collect middlewares from plugins\n\tbag.forEachPlugin('createMiddleware', (createMiddleware) => {\n\t\tbag.reduxConfig.middlewares.push(createMiddleware(bag))\n\t})\n\n\tconst reduxStore = createReduxStore(bag)\n\n\tlet rematchStore = {\n\t\t...reduxStore,\n\t\tname: config.name,\n\t\taddModel(model: NamedModel<TModels>) {\n\t\t\tvalidateModel(model)\n\t\t\tcreateModelReducer(bag, model)\n\t\t\tprepareModel(this, bag, model)\n\t\t\tthis.replaceReducer(createRootReducer(bag))\n\t\t\treduxStore.dispatch({ type: '@@redux/REPLACE' })\n\t\t},\n\t} as RematchStore<TModels, TExtraModels>\n\n\taddExposed(rematchStore, config.plugins)\n\n\trematchStore.addModel.bind(rematchStore)\n\n\t// generate dispatch[modelName][actionName] for all reducers and effects\n\tfor (const model of bag.models) {\n\t\tprepareModel(rematchStore, bag, model)\n\t}\n\n\tbag.forEachPlugin('onStoreCreated', (onStoreCreated) => {\n\t\trematchStore = onStoreCreated(rematchStore, bag) || rematchStore\n\t})\n\n\treturn rematchStore\n}\n\nfunction createEffectsMiddleware<\n\tTModels extends Models<TModels> = Record<string, any>\n>(bag: RematchBag<TModels>): Middleware {\n\treturn (store) => (next) => (action: Action): any => {\n\t\tif (action.type in bag.effects) {\n\t\t\t// first run reducer action if exists\n\t\t\tnext(action)\n\n\t\t\t// then run the effect and return its result\n\t\t\treturn bag.effects[action.type](action.payload, store.getState())\n\t\t}\n\n\t\treturn next(action)\n\t}\n}\n\nfunction prepareModel<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTModel extends NamedModel<TModels> = NamedModel\n>(\n\trematchStore: RematchStore<TModels>,\n\tbag: RematchBag<TModels>,\n\tmodel: TModel\n): void {\n\tconst modelDispatcher = {} as ModelDispatcher<TModel, TModels>\n\n\t// inject model so effects creator can access it\n\trematchStore.dispatch[\n\t\t`${model.name}` as keyof RematchDispatch<TModels>\n\t] = modelDispatcher\n\n\tcreateDispatcher(rematchStore, bag, model)\n\n\tbag.forEachPlugin('onModel', (onModel) => {\n\t\tonModel(model, rematchStore)\n\t})\n}\n\n/**\n * Adds properties exposed by plugins into the Rematch instance. If a exposed\n * property is a function, it passes rematch as the first argument.\n *\n * If you're implementing a plugin in TypeScript, extend Rematch namespace by\n * adding the properties that you exposed from your plugin.\n */\nfunction addExposed<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tstore: RematchStore<TModels, TExtraModels>,\n\tplugins: Plugin<TModels, TExtraModels>[]\n): void {\n\tfor (const plugin of plugins) {\n\t\tif (plugin.exposed) {\n\t\t\tfor (const key of Object.keys(plugin.exposed)) {\n\t\t\t\tconst exposedItem = plugin.exposed[key] as\n\t\t\t\t\t| ExposedFunction\n\t\t\t\t\t| ObjectNotAFunction\n\t\t\t\tconst isExposedFunction = typeof exposedItem === 'function'\n\n\t\t\t\tstore[key] = isExposedFunction\n\t\t\t\t\t? (...params: any[]): any =>\n\t\t\t\t\t\t\t(exposedItem as ExposedFunction)(store, ...params)\n\t\t\t\t\t: Object.create(plugin.exposed[key])\n\t\t\t}\n\t\t}\n\t}\n}\n","import { InitConfig, Config, Models } from './types'\nimport { validateConfig, validatePlugin } from './validate'\n\nlet count = 0\n\n/**\n * Builds complete Rematch config using default values for properties not\n * supplied by the user. Additionally, applies changes to the config made by\n * the plugins selected by the user.\n */\nexport default function createConfig<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tinitConfig: InitConfig<TModels, TExtraModels>\n): Config<TModels, TExtraModels> {\n\tconst storeName = initConfig.name ?? `Rematch Store ${count}`\n\n\tcount += 1\n\n\tconst config = {\n\t\tname: storeName,\n\t\tmodels: initConfig.models || {},\n\t\tplugins: initConfig.plugins || [],\n\t\tredux: {\n\t\t\treducers: {},\n\t\t\trootReducers: {},\n\t\t\tenhancers: [],\n\t\t\tmiddlewares: [],\n\t\t\t...initConfig.redux,\n\t\t\tdevtoolOptions: {\n\t\t\t\tname: storeName,\n\t\t\t\t...(initConfig.redux?.devtoolOptions ?? {}),\n\t\t\t},\n\t\t},\n\t} as Config\n\n\tvalidateConfig(config)\n\n\t// Apply changes to the config required by plugins\n\tfor (const plugin of config.plugins) {\n\t\tif (plugin.config) {\n\t\t\t// Collect new models\n\t\t\tconfig.models = merge(config.models, plugin.config.models)\n\n\t\t\t// Collect redux configuration changes\n\t\t\tif (plugin.config.redux) {\n\t\t\t\tconfig.redux.initialState = merge(\n\t\t\t\t\tconfig.redux.initialState,\n\t\t\t\t\tplugin.config.redux.initialState\n\t\t\t\t)\n\n\t\t\t\tconfig.redux.reducers = merge(\n\t\t\t\t\tconfig.redux.reducers,\n\t\t\t\t\tplugin.config.redux.reducers\n\t\t\t\t)\n\n\t\t\t\tconfig.redux.rootReducers = merge(\n\t\t\t\t\tconfig.redux.rootReducers,\n\t\t\t\t\tplugin.config.redux.reducers\n\t\t\t\t)\n\n\t\t\t\tconfig.redux.enhancers = [\n\t\t\t\t\t...config.redux.enhancers,\n\t\t\t\t\t...(plugin.config.redux.enhancers || []),\n\t\t\t\t]\n\n\t\t\t\tconfig.redux.middlewares = [\n\t\t\t\t\t...config.redux.middlewares,\n\t\t\t\t\t...(plugin.config.redux.middlewares || []),\n\t\t\t\t]\n\n\t\t\t\tconfig.redux.combineReducers =\n\t\t\t\t\tconfig.redux.combineReducers || plugin.config.redux.combineReducers\n\n\t\t\t\tconfig.redux.createStore =\n\t\t\t\t\tconfig.redux.createStore || plugin.config.redux.createStore\n\t\t\t}\n\t\t}\n\n\t\tvalidatePlugin(plugin)\n\t}\n\n\treturn config as Config<TModels, TExtraModels>\n}\n\n/**\n * Shallow merges original object with the extra object, giving the precedence\n * to the original object.\n */\nfunction merge<T extends object>(original: T, extra: T | undefined): T {\n\treturn extra ? { ...extra, ...original } : original\n}\n","import createRematchStore from './rematchStore'\nimport { InitConfig, Models, RematchStore, ModelCreator } from './types'\nimport createConfig from './config'\n\n/**\n * Prepares a complete configuration and creates a Rematch store.\n */\nexport const init = <\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tinitConfig?: InitConfig<TModels, TExtraModels>\n): RematchStore<TModels, TExtraModels> => {\n\tconst config = createConfig(initConfig || {})\n\treturn createRematchStore(config)\n}\n\nexport const createModel: ModelCreator = () => (mo): any => {\n\tconst { reducers = {}, effects = {} } = mo\n\n\treturn {\n\t\t...mo,\n\t\treducers,\n\t\teffects,\n\t}\n}\n\nexport default {\n\tinit,\n\tcreateModel,\n}\n\nexport * from './types'\n","import { Config, Model, Models, NamedModel, RematchBag } from './types'\nimport { validateModel } from './validate'\n\n/**\n * Creates and returns a 'Rematch Bag', which is a set of configuration options\n * used by the Rematch library in various functions.\n */\nexport default function createRematchBag<\n\tTModels extends Models<TModels> = Record<string, any>,\n\tTExtraModels extends Models<TModels> = {}\n>(config: Config<TModels, TExtraModels>): RematchBag<TModels, TExtraModels> {\n\treturn {\n\t\tmodels: createNamedModels(config.models),\n\t\treduxConfig: config.redux,\n\t\tforEachPlugin(method, fn): void {\n\t\t\tfor (const plugin of config.plugins) {\n\t\t\t\tif (plugin[method]) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t// temporary ignore, see: https://github.com/microsoft/TypeScript/issues/40429\n\t\t\t\t\tfn(plugin[method])\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\teffects: {},\n\t}\n}\n\n/**\n * Transforms mapping from a model name to a model object, into an array of\n * 'named' models - models with embedded name and default value for reducers\n * if user didn't provide any.\n */\nfunction createNamedModels<\n\tTModels extends Models<TModels> = Record<string, any>\n>(models: TModels): NamedModel<TModels>[] {\n\treturn Object.keys(models).map((modelName: string) => {\n\t\tconst model = createNamedModel(modelName, models[modelName])\n\t\tvalidateModel(model)\n\t\treturn model\n\t})\n}\n\n/**\n * Transforms a model into 'named' model - model which contains 'name' and\n * 'reducers' properties if user didn't provide any.\n */\nfunction createNamedModel<\n\tTModels extends Models<TModels> = Record<string, any>\n>(name: string, model: Model<TModels>): NamedModel<TModels> {\n\treturn {\n\t\tname,\n\t\treducers: {},\n\t\t...model,\n\t}\n}\n"],"names":["createModelReducer","bag","model","modelReducers","Object","keys","reducers","reducerKey","actionName","isAlreadyActionName","name","combinedReducer","state","action","type","payload","modelBaseReducer","baseReducer","reducer","forEachPlugin","onReducer","reduxConfig","createRootReducer","combineReducers","rootReducers","mergedReducers","Redux","length","rootReducer","actionRootReducer","onRootReducer","indexOf","createActionDispatcher","rematch","modelName","isEffect","assign","dispatch","prepareModel","rematchStore","modelDispatcher","reducerName","effects","effectName","bind","createDispatcher","onModel","count","merge","original","extra","init","initConfig","config","models","map","redux","method","fn","plugins","plugin","createRematchBag","middlewares","push","store","next","getState","createEffectsMiddleware","createMiddleware","reduxStore","enhancers","devtoolOptions","disabled","options","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composeEnhancersWithDevtools","bagInitialState","initialState","createStore","undefined","createReduxStore","addModel","this","replaceReducer","exposed","key","exposedItem","params","create","addExposed","onStoreCreated","createRematchStore","storeName","_initConfig$redux","createConfig","createModel","mo"],"mappings":"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"}