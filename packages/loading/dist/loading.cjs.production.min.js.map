{"version":3,"file":"loading.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import {\n\tExtractRematchDispatchersFromEffects,\n\tPlugin,\n\tModels,\n\tReducer,\n\tNamedModel,\n\tAction,\n} from '@rematch/core'\n\nexport interface LoadingConfig {\n\tname?: string\n\twhitelist?: string[]\n\tblacklist?: string[]\n\tasNumber?: boolean\n}\n\ninterface LoadingState<\n\tTModels extends Models<TModels>,\n\tAsNumber extends boolean = false\n> {\n\tglobal: AsNumber extends true ? number : boolean\n\tmodels: {\n\t\t[modelName in keyof TModels]: AsNumber extends true ? number : boolean\n\t}\n\teffects: {\n\t\t[modelName in keyof TModels]: {\n\t\t\t[effectName in keyof ExtractRematchDispatchersFromEffects<\n\t\t\t\tTModels[modelName]['effects'],\n\t\t\t\tTModels\n\t\t\t>]: AsNumber extends true ? number : boolean\n\t\t}\n\t}\n}\n\ninterface InitialState<AsNumber extends boolean = false> {\n\tglobal: AsNumber extends true ? number : boolean\n\tmodels: {\n\t\t[modelName: string]: AsNumber extends true ? number : boolean\n\t}\n\teffects: {\n\t\t[modelName: string]: {\n\t\t\t[effectName: string]: AsNumber extends true ? number : boolean\n\t\t}\n\t}\n}\n\ntype Converter = ((cnt: number) => number) | ((cnt: number) => boolean)\n\ninterface LoadingModel<\n\tTModels extends Models<TModels>,\n\tAsNumber extends boolean = false\n> extends NamedModel<TModels, LoadingState<TModels, AsNumber>> {\n\treducers: {\n\t\thide: Reducer<LoadingState<TModels, AsNumber>>\n\t\tshow: Reducer<LoadingState<TModels, AsNumber>>\n\t}\n}\n\nexport interface ExtraModelsFromLoading<TModels extends Models<TModels>>\n\textends Models<TModels> {\n\tloading: LoadingModel<TModels>\n}\n\nconst createLoadingAction = <\n\tTModels extends Models<TModels>,\n\tAsNumber extends boolean = false\n>(\n\tconverter: Converter,\n\ti: number,\n\tcntState: InitialState<true>\n): Reducer<LoadingState<TModels, AsNumber>> => (\n\tstate,\n\tpayload: Action<{ name: string; action: string }>['payload']\n): LoadingState<TModels, boolean> => {\n\tconst { name, action } = payload || { name: '', action: '' }\n\n\tcntState.global += i\n\tcntState.models[name] += i\n\tcntState.effects[name][action] += i\n\n\treturn {\n\t\t...state,\n\t\tglobal: converter(cntState.global),\n\t\tmodels: {\n\t\t\t...state.models,\n\t\t\t[name]: converter(cntState.models[name]),\n\t\t},\n\t\teffects: {\n\t\t\t...state.effects,\n\t\t\t[name]: {\n\t\t\t\t...state.effects[name],\n\t\t\t\t[action]: converter(cntState.effects[name][action]),\n\t\t\t},\n\t\t},\n\t}\n}\n\nconst validateConfig = (config: LoadingConfig): void => {\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tif (config.name && typeof config.name !== 'string') {\n\t\t\tthrow new Error('loading plugin config name must be a string')\n\t\t}\n\t\tif (config.asNumber && typeof config.asNumber !== 'boolean') {\n\t\t\tthrow new Error('loading plugin config asNumber must be a boolean')\n\t\t}\n\t\tif (config.whitelist && !Array.isArray(config.whitelist)) {\n\t\t\tthrow new Error(\n\t\t\t\t'loading plugin config whitelist must be an array of strings'\n\t\t\t)\n\t\t}\n\t\tif (config.blacklist && !Array.isArray(config.blacklist)) {\n\t\t\tthrow new Error(\n\t\t\t\t'loading plugin config blacklist must be an array of strings'\n\t\t\t)\n\t\t}\n\t\tif (config.whitelist && config.blacklist) {\n\t\t\tthrow new Error(\n\t\t\t\t'loading plugin config cannot have both a whitelist & a blacklist'\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default <\n\tTModels extends Models<TModels>,\n\tTExtraModels extends Models<TModels> = {}\n>(\n\tconfig: LoadingConfig = {}\n): Plugin<TModels, TExtraModels, ExtraModelsFromLoading<TModels>> => {\n\tvalidateConfig(config)\n\n\tconst loadingModelName = config.name || 'loading'\n\n\tconst cntState: InitialState<true> = {\n\t\tglobal: 0,\n\t\tmodels: {},\n\t\teffects: {},\n\t}\n\n\tconst isAsNumber = config.asNumber === true\n\n\tconst loadingInitialState: InitialState<typeof isAsNumber> = {\n\t\tglobal: 0,\n\t\tmodels: {},\n\t\teffects: {},\n\t}\n\n\tconst converter = isAsNumber\n\t\t? (cnt: number): number => cnt\n\t\t: (cnt: number): boolean => cnt > 0\n\n\tconst loading: LoadingModel<TModels, typeof isAsNumber> = {\n\t\tname: loadingModelName,\n\t\treducers: {\n\t\t\thide: createLoadingAction(converter, -1, cntState),\n\t\t\tshow: createLoadingAction(converter, 1, cntState),\n\t\t},\n\t\tstate: loadingInitialState as LoadingState<TModels, typeof isAsNumber>,\n\t}\n\n\tconst initialLoadingValue = converter(0)\n\n\tloadingInitialState.global = initialLoadingValue\n\n\treturn {\n\t\tconfig: {\n\t\t\tmodels: {\n\t\t\t\tloading,\n\t\t\t},\n\t\t},\n\t\tonModel({ name }, rematch): void {\n\t\t\t// do not run dispatch on \"loading\" model\n\t\t\tif (name === loadingModelName) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tcntState.models[name] = 0\n\t\t\tcntState.effects[name] = {}\n\n\t\t\tloadingInitialState.models[name] = initialLoadingValue\n\t\t\tloadingInitialState.effects[name] = {}\n\n\t\t\tconst modelActions = rematch.dispatch[name]\n\n\t\t\t// map over effects within models\n\t\t\tObject.keys(modelActions).forEach((action: string) => {\n\t\t\t\tif (!rematch.dispatch[name][action].isEffect) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tcntState.effects[name][action] = 0\n\t\t\t\tloadingInitialState.effects[name][action] = initialLoadingValue\n\n\t\t\t\tconst actionType = `${name}/${action}`\n\n\t\t\t\t// ignore items not in whitelist\n\t\t\t\tif (config.whitelist && !config.whitelist.includes(actionType)) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// ignore items in blacklist\n\t\t\t\tif (config.blacklist && config.blacklist.includes(actionType)) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\t// copy orig effect pointer\n\t\t\t\tconst origEffect = rematch.dispatch[name][action]\n\n\t\t\t\t// create function with pre & post loading calls\n\t\t\t\tconst effectWrapper = (...props: any): any => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// show loading\n\t\t\t\t\t\trematch.dispatch[loadingModelName].show({ name, action })\n\t\t\t\t\t\t// dispatch the original action\n\t\t\t\t\t\tconst effectResult = origEffect(...props)\n\n\t\t\t\t\t\t// check if result is a promise\n\t\t\t\t\t\tif (effectResult?.then) {\n\t\t\t\t\t\t\t// hide loading when promise finishes either with success or error\n\t\t\t\t\t\t\teffectResult\n\t\t\t\t\t\t\t\t.then((r: any) => {\n\t\t\t\t\t\t\t\t\trematch.dispatch[loadingModelName].hide({ name, action })\n\t\t\t\t\t\t\t\t\treturn r\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((err: any) => {\n\t\t\t\t\t\t\t\t\trematch.dispatch[loadingModelName].hide({ name, action })\n\t\t\t\t\t\t\t\t\tthrow err\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// original action doesn't return a promise so there's nothing to wait for\n\t\t\t\t\t\t\trematch.dispatch[loadingModelName].hide({ name, action })\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// return the original result of this reducer\n\t\t\t\t\t\treturn effectResult\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\trematch.dispatch[loadingModelName].hide({ name, action })\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\teffectWrapper.isEffect = true\n\n\t\t\t\t// replace existing effect with new wrapper\n\t\t\t\trematch.dispatch[name][action] = effectWrapper\n\t\t\t})\n\t\t},\n\t}\n}\n"],"names":["createLoadingAction","converter","i","cntState","state","payload","name","action","global","models","effects","config","loadingModelName","loadingInitialState","asNumber","cnt","loading","reducers","hide","show","initialLoadingValue","onModel","rematch","Object","keys","dispatch","forEach","isEffect","actionType","whitelist","includes","blacklist","origEffect","effectWrapper","effectResult","then","r","err","error"],"mappings":"mRA+DA,IAAMA,EAAsB,SAI3BC,EACAC,EACAC,UAC8C,SAC9CC,EACAC,eAEyBA,GAAW,CAAEC,KAAM,GAAIC,OAAQ,IAAhDD,IAAAA,KAAMC,IAAAA,cAEdJ,EAASK,QAAUN,EACnBC,EAASM,OAAOH,IAASJ,EACzBC,EAASO,QAAQJ,GAAMC,IAAWL,OAG9BE,GACHI,OAAQP,EAAUE,EAASK,QAC3BC,YACIL,EAAMK,eACRH,GAAOL,EAAUE,EAASM,OAAOH,QAEnCI,aACIN,EAAMM,gBACRJ,QACGF,EAAMM,QAAQJ,WAChBC,GAASN,EAAUE,EAASO,QAAQJ,GAAMC,yCAoC9CI,YAAAA,IAAAA,EAAwB,QAIlBC,EAAmBD,EAAOL,MAAQ,UAElCH,EAA+B,CACpCK,OAAQ,EACRC,OAAQ,GACRC,QAAS,IAKJG,EAAuD,CAC5DL,OAAQ,EACRC,OAAQ,GACRC,QAAS,IAGJT,GARiC,IAApBU,EAAOG,SASvB,SAACC,UAAwBA,GACzB,SAACA,UAAyBA,EAAM,GAE7BC,EAAoD,CACzDV,KAAMM,EACNK,SAAU,CACTC,KAAMlB,EAAoBC,GAAY,EAAGE,GACzCgB,KAAMnB,EAAoBC,EAAW,EAAGE,IAEzCC,MAAOS,GAGFO,EAAsBnB,EAAU,UAEtCY,EAAoBL,OAASY,EAEtB,CACNT,OAAQ,CACPF,OAAQ,CACPO,QAAAA,IAGFK,mBAAkBC,OAARhB,IAAAA,KAELA,IAASM,IAIbT,EAASM,OAAOH,GAAQ,EACxBH,EAASO,QAAQJ,GAAQ,GAEzBO,EAAoBJ,OAAOH,GAAQc,EACnCP,EAAoBH,QAAQJ,GAAQ,GAKpCiB,OAAOC,KAHcF,EAAQG,SAASnB,IAGZoB,SAAQ,SAACnB,MAC7Be,EAAQG,SAASnB,GAAMC,GAAQoB,UAIpCxB,EAASO,QAAQJ,GAAMC,GAAU,EACjCM,EAAoBH,QAAQJ,GAAMC,GAAUa,MAEtCQ,EAAgBtB,MAAQC,OAG1BI,EAAOkB,WAAclB,EAAOkB,UAAUC,SAASF,OAK/CjB,EAAOoB,YAAapB,EAAOoB,UAAUD,SAASF,SAK5CI,EAAaV,EAAQG,SAASnB,GAAMC,GAGpC0B,EAAgB,eAGpBX,EAAQG,SAASb,GAAkBO,KAAK,CAAEb,KAAAA,EAAMC,OAAAA,QAE1C2B,EAAeF,iCAGjBE,MAAAA,SAAAA,EAAcC,MAEjBD,EACEC,MAAK,SAACC,UACNd,EAAQG,SAASb,GAAkBM,KAAK,CAAEZ,KAAAA,EAAMC,OAAAA,IACzC6B,YAED,SAACC,SACPf,EAAQG,SAASb,GAAkBM,KAAK,CAAEZ,KAAAA,EAAMC,OAAAA,IAC1C8B,KAIRf,EAAQG,SAASb,GAAkBM,KAAK,CAAEZ,KAAAA,EAAMC,OAAAA,IAI1C2B,EACN,MAAOI,SACRhB,EAAQG,SAASb,GAAkBM,KAAK,CAAEZ,KAAAA,EAAMC,OAAAA,IAC1C+B,IAIRL,EAAcN,UAAW,EAGzBL,EAAQG,SAASnB,GAAMC,GAAU0B"}