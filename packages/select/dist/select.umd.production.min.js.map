{"version":3,"file":"select.umd.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import {\n\tExtractRematchStateFromModels,\n\tModel,\n\tModels,\n\tPlugin,\n\tRematchStore,\n} from '@rematch/core'\nimport { createSelector, createStructuredSelector } from 'reselect'\nimport { SelectConfig } from './types'\n\nconst makeSelect = () => {\n\t/**\n\t * Maps models to structured selector\n\t * @param  mapSelectToStructure function that gets passed `selectors` and returns an object\n\t * @param  structuredSelectorCreator=createStructuredSelector if you need to provide your own implementation\n\t *\n\t * @return the result of calling `structuredSelectorCreator` with the new selectors\n\t */\n\tfunction select(\n\t\tmapSelectToStructure: any,\n\t\tstructuredSelectorCreator = createStructuredSelector\n\t) {\n\t\tlet func = (state: any, props: any): any => {\n\t\t\tfunc = structuredSelectorCreator(mapSelectToStructure(select))\n\t\t\treturn func(state, props)\n\t\t}\n\n\t\treturn (state: any, props: any) => func(state, props)\n\t}\n\n\treturn select\n}\n\nconst makeFactoryGroup = () => {\n\tlet ready = false\n\tconst factories = new Set()\n\treturn {\n\t\tadd(added: any) {\n\t\t\tif (!ready) {\n\t\t\t\tadded.forEach((factory: any) => factories.add(factory))\n\t\t\t} else {\n\t\t\t\tadded.forEach((factory: any) => factory())\n\t\t\t}\n\t\t},\n\t\tfinish(factory: any) {\n\t\t\tfactories.delete(factory)\n\t\t},\n\t\tstartBuilding() {\n\t\t\tready = true\n\t\t\tfactories.forEach((factory: any) => factory())\n\t\t},\n\t}\n}\n\nconst validateConfig = <TModels extends Models<TModels>>(\n\tconfig: SelectConfig<TModels>\n): void => {\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tif (config.sliceState && typeof config.sliceState !== 'function') {\n\t\t\tthrow new Error('select plugin config sliceState must be a function')\n\t\t}\n\n\t\tif (\n\t\t\tconfig.selectorCreator &&\n\t\t\ttypeof config.selectorCreator !== 'function'\n\t\t) {\n\t\t\tthrow new Error('select plugin config selectorCreator must be a function')\n\t\t}\n\t}\n}\n\nconst validateSelector = (\n\tselectorFactories: any,\n\tselectorName: any,\n\tmodel: any\n): void => {\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tif (typeof selectorFactories?.[selectorName] !== 'function') {\n\t\t\tthrow new Error(\n\t\t\t\t`Selector (${model.name}/${selectorName}) must be a function`\n\t\t\t)\n\t\t}\n\t}\n}\n\nconst createSelectPlugin = <\n\tTModels extends Models<TModels>,\n\tTExtraModels extends Models<TModels> = Record<string, any>\n>(\n\tconfig: SelectConfig<TModels> = {}\n): Plugin<TModels, TExtraModels> => {\n\tvalidateConfig(config)\n\n\tconst sliceState: SelectConfig<TModels>['sliceState'] =\n\t\tconfig.sliceState || ((state, model) => state[model.name || ''])\n\tconst selectorCreator = config.selectorCreator || createSelector\n\n\tconst slice = (model: Model<TModels>) => (\n\t\tstateOrNext: ExtractRematchStateFromModels<TModels>\n\t) => {\n\t\tif (typeof stateOrNext === 'function') {\n\t\t\treturn selectorCreator(\n\t\t\t\t(state: ExtractRematchStateFromModels<TModels>) =>\n\t\t\t\t\tsliceState(state, model),\n\t\t\t\tstateOrNext\n\t\t\t)\n\t\t}\n\t\treturn sliceState(stateOrNext, model)\n\t}\n\n\tconst hasProps = (inner: any) =>\n\t\tfunction (this: any, models: any) {\n\t\t\treturn selectorCreator(\n\t\t\t\t(props: any) => props,\n\t\t\t\t(props: any) => inner.call(this, models, props)\n\t\t\t)\n\t\t}\n\n\tconst factoryGroup = makeFactoryGroup()\n\n\tconst select = makeSelect()\n\n\treturn {\n\t\texposed: {\n\t\t\tselect,\n\t\t\t// @ts-ignore\n\t\t\tsliceState,\n\t\t\tselectorCreator,\n\t\t},\n\t\tonModel(model: Model<TModels>) {\n\t\t\t// @ts-ignore\n\t\t\tselect[model.name] = {}\n\n\t\t\tconst selectorFactories =\n\t\t\t\ttypeof model.selectors === 'function'\n\t\t\t\t\t? // @ts-ignore\n\t\t\t\t\t  model.selectors(slice(model), selectorCreator, hasProps)\n\t\t\t\t\t: model.selectors\n\n\t\t\tfactoryGroup.add(\n\t\t\t\tObject.keys(selectorFactories || {}).map((selectorName: string) => {\n\t\t\t\t\tvalidateSelector(selectorFactories, selectorName, model)\n\n\t\t\t\t\tconst factory = () => {\n\t\t\t\t\t\tfactoryGroup.finish(factory)\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tdelete select[model.name][selectorName]\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tselect[model.name][selectorName] = selectorFactories[\n\t\t\t\t\t\t\tselectorName\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t].call(select[model.name], select)\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\treturn select[model.name][selectorName]\n\t\t\t\t\t}\n\n\t\t\t\t\t// Define a getter for early constructing\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tObject.defineProperty(select[model.name], selectorName, {\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\tget() {\n\t\t\t\t\t\t\treturn factory()\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\n\t\t\t\t\treturn factory\n\t\t\t\t})\n\t\t\t)\n\t\t},\n\t\t// @ts-ignore\n\t\tonStoreCreated(store: RematchStore) {\n\t\t\tfactoryGroup.startBuilding()\n\t\t\t// @ts-ignore\n\t\t\tstore.select = select\n\t\t},\n\t}\n}\n\nexport default createSelectPlugin\nexport * from './types'\n"],"names":["config","ready","factories","sliceState","state","model","name","selectorCreator","createSelector","hasProps","inner","models","props","call","_this","factoryGroup","Set","add","added","forEach","factory","finish","startBuilding","select","mapSelectToStructure","structuredSelectorCreator","createStructuredSelector","func","exposed","onModel","selectorFactories","selectors","stateOrNext","slice","Object","keys","map","selectorName","defineProperty","configurable","get","onStoreCreated","store"],"mappings":"8dAqF2B,SAI1BA,YAAAA,IAAAA,EAAgC,QAvD5BC,EACEC,EA0DAC,EACLH,EAAOG,YAAe,SAACC,EAAOC,UAAUD,EAAMC,EAAMC,MAAQ,KACvDC,EAAkBP,EAAOO,iBAAmBC,iBAe5CC,EAAW,SAACC,UACjB,SAAqBC,qBACbJ,GACN,SAACK,UAAeA,KAChB,SAACA,UAAeF,EAAMG,KAAKC,EAAMH,EAAQC,QAItCG,GApFFd,GAAQ,EACNC,EAAY,IAAIc,IACf,CACNC,aAAIC,GAIFA,EAAMC,QAHFlB,EAGU,SAACmB,UAAiBA,KAFlB,SAACA,UAAiBlB,EAAUe,IAAIG,MAKhDC,gBAAOD,GACNlB,SAAiBkB,IAElBE,yBACCrB,GAAQ,EACRC,EAAUiB,SAAQ,SAACC,UAAiBA,UAuEhCG,WAtGGA,EACRC,EACAC,YAAAA,IAAAA,EAA4BC,gCAExBC,EAAO,SAACvB,EAAYQ,UACvBe,EAAOF,EAA0BD,EAAqBD,KAC1CnB,EAAOQ,WAGb,SAACR,EAAYQ,UAAee,EAAKvB,EAAOQ,WA+FzC,CACNgB,QAAS,CACRL,OAAAA,EAEApB,WAAAA,EACAI,gBAAAA,GAEDsB,iBAAQxB,GAEPkB,EAAOlB,EAAMC,MAAQ,OAEfwB,EACsB,mBAApBzB,EAAM0B,UAEV1B,EAAM0B,UAvCE,SAAC1B,UAA0B,SACxC2B,SAE2B,mBAAhBA,EACHzB,GACN,SAACH,UACAD,EAAWC,EAAOC,KACnB2B,GAGK7B,EAAW6B,EAAa3B,IA6BV4B,CAAM5B,GAAQE,EAAiBE,GAC/CJ,EAAM0B,UAEVhB,EAAaE,IACZiB,OAAOC,KAAKL,GAAqB,IAAIM,KAAI,SAACC,OAGnCjB,EAAU,SAAVA,WACLL,EAAaM,OAAOD,UAEbG,EAAOlB,EAAMC,MAAM+B,GAE1Bd,EAAOlB,EAAMC,MAAM+B,GAAgBP,EAClCO,GAECxB,KAAKU,EAAOlB,EAAMC,MAAOiB,WAO5BW,OAAOI,eAAef,EAAOlB,EAAMC,MAAO+B,EAAc,CACvDE,cAAc,EACdC,sBACQpB,OAIFA,OAKVqB,wBAAeC,GACd3B,EAAaO,gBAEboB,EAAMnB,OAASA"}